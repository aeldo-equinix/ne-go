swagger: "2.0"
info:
  description: API Documentation for Network Edge APIs. More information about Network Edge marketplace & platform can be found [here](https://docs.equinix.com/en-us/Content/Interconnection/NE/landing-pages/NE-landing-main.htm).
  version: "1.0"
  title: Network Edge APIs
  contact:
    name: Network Edge Support
    email: Network-Edge-Support@equinix.com
host: api.equinix.com
schemes:
  - https
paths:
  /ne/v1/device/type:
    get:
      tags:
        - Setup
      summary: Get Device Types.
      description: Gets a list of available device types (e.g., routers and firewalls and their vendors and model numbers) that can be launched on the NE platform
      operationId: getVirtualDevicesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deviceTypeCode
          in: query
          description: Device type code (e.g., CSR1000V)
          type: string
          required: false
        - name: category
          in: query
          description: Category. One of FIREWALL, ROUTER or SDWAN
          required: false
          type: string
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 1
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 100
          format: int32
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/PageResponseDto-VirtualDeviceType"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/metro:
    get:
      tags:
        - Setup
      summary: Returns list of Available Metros
      description: |
        Gets the available list of metros where NE platform is available.
        NOTE: An account must be created for each country where virtual devices are being purchased.
      operationId: getMetrosUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: region
          in: query
          description: Name of the region for which you want metros (e.g., AMER)
          required: false
          type: string
        - name: page
          in: query
          description: Page number
          required: false
          type: integer
          default: 1
          format: int32
        - name: size
          in: query
          description: Number of results per page
          required: false
          type: integer
          default: 20
          format: int32
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/PageResponseDto-MetroResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/account/{metro}:
    get:
      tags:
        - Setup
      summary: Get Account Status
      description: Gets accounts by metro. You must have an account in a metro to create a virtual device there. To create an account go to "accountCreateUrl".
      operationId: getAccountsWithStatusUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metro
          in: path
          description: Metro region for which you want to check your account status
          required: true
          type: string
        - name: accountUcmId
          in: query
          description: Unique ID of an account
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Successfully retrieved the account details
          schema:
            $ref: "#/definitions/PageResponseDto-MetroAccountResponse"
        "401":
          description: You are not authorized to view the resource
        "403":
          description: Accessing the resource you were trying to reach is forbidden
        "404":
          description: Resource not found
        "500":
          description: 500 message
  /ne/v1/device/agreement/account:
    get:
      tags:
        - Setup
      summary: Get Agreement Status
      description: Call this API to find out the status of your agreement, whether it is valid or not, or to just read the agreement terms.
      operationId: getAgreementStatusUsingGET
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: account_number
          in: query
          description: account_number
          required: true
          type: string
        - name: ibx
          in: query
          description: ibx
          required: false
          type: string
        - name: source
          in: query
          description: source
          required: false
          type: string
          default: NFV
        - name: language
          in: query
          description: language
          required: false
          type: string
          default: English
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Successfully retrieved Status
          schema:
            $ref: "#/definitions/AgreementStatusResponse"
        "404":
          description: Resource not found
        "500":
          description: 500 message
    post:
      tags:
        - Setup
      summary: Call this API to post an agreement
      description: Call this API to post an agreement. The authorization token and content-type are the only headers that are passed to this API and a response is received based on the values passed.
      operationId: sendAgreementUsingPOST_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: agreementAcceptRequest
          description: agreementAcceptRequest
          required: true
          schema:
            $ref: "#/definitions/AgreementAcceptRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: "Successfully posted terms "
          schema:
            $ref: "#/definitions/AgreementAcceptResponse"
        "404":
          description: Resource not found
  /ne/v1/device/agreement/vendor:
    get:
      tags:
        - Setup
      summary: Get Vendor Terms link
      description: Call this API to get a link to your vendor's terms.
      operationId: getVendorTermsUsingGET
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: vendorPackage
          in: query
          description: vendorPackage
          required: true
          type: string
        - name: licenseType
          in: query
          description: licenseType
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Successfully retrieved vendor terms
          schema:
            $ref: "#/definitions/OrderTermsResponse"
        "404":
          description: Resource not found
        "500":
          description: 500 message
  /ne/v1/device/agreement/order:
    get:
      tags:
        - Setup
      summary: Get Order Terms
      description: This API retrieves the Network Edge Order Terms and Conditions, which the user needs to read before proceed further to order
      operationId: getOrderTermsUsingGET
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: source
          in: query
          description: source
          required: false
          type: string
          default: Network Edge Portal Order Terms
        - name: language
          in: query
          description: language
          required: false
          type: string
          default: English
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Successfully retrieved Status
          schema:
            $ref: "#/definitions/OrderTermsResponse"
        "404":
          description: Resource not found
        "500":
          description: 500 message
  /ne/v1/device/price:
    get:
      tags:
        - Setup
      summary: Get Price of a Virtual Device and License
      description: |
        Gets the price of a virtual device and license based on account number, metro, vendor package, license type, software package and throughput.
        NOTE: It will not include pricing for any optional features added to the device, some of which are charged.
      operationId: retrievePriceUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountNumber
          in: query
          description: Account number
          required: false
          type: integer
          format: int32
        - name: metro
          in: query
          description: Metro
          required: false
          type: string
        - name: vendorPackage
          in: query
          description: Vendor package
          required: false
          type: string
        - name: licenseType
          in: query
          description: License type
          required: false
          type: string
        - name: softwarePackage
          in: query
          description: Software package
          required: false
          type: string
        - name: throughput
          in: query
          description: Throughput
          required: false
          type: integer
          format: int32
        - name: throughputUnit
          in: query
          description: Throughput unit
          required: false
          type: string
        - name: termLength
          in: query
          description: Term length (in months)
          required: false
          type: string
        - name: additionalBandwidth
          in: query
          description: Additional bandwidth (in Mbps)
          required: false
          type: integer
          format: int32
        - name: virtualDeviceUUID
          in: query
          description: Virtual device UUID (only required if existing device is being modified)
          required: false
          type: string
        - name: secondaryAccountNumber
          in: query
          description: Secondary account number (for HA)
          required: false
          type: integer
          format: int32
        - name: secondaryMetro
          in: query
          description: Secondary metro (for HA)
          required: false
          type: string
        - name: secondaryAdditionalBandwidth
          in: query
          description: Secondary additional bandwidth (in Mbps for HA)
          required: false
          type: integer
          format: int32
        - name: accountUcmId
          in: query
          description: Account unique ID
          required: false
          type: string
        - name: orderingContact
          in: query
          description: Reseller customer username
          required: false
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/CompositePriceResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/order-summary:
    get:
      tags:
        - Setup
      summary: Print order summary for the selected device configuration
      description: Gets the order summary as a printable pdf file. This API helps customers who have to go through a PO process at their end to make a purchase and need a formal quote
      operationId: getOrderSummaryUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountNumber
          in: query
          description: Account number
          required: false
          type: integer
          format: int32
        - name: metro
          in: query
          description: Metro
          required: false
          type: string
        - name: vendorPackage
          in: query
          description: Vendor package
          required: false
          type: string
        - name: licenseType
          in: query
          description: License type
          required: false
          type: string
        - name: softwarePackage
          in: query
          description: Software package
          required: false
          type: string
        - name: throughput
          in: query
          description: Throughput
          required: false
          type: integer
          format: int32
        - name: throughputUnit
          in: query
          description: Throughput unit
          required: false
          type: string
        - name: termLength
          in: query
          description: Term length (in months)
          required: false
          type: string
        - name: additionalBandwidth
          in: query
          description: Additional bandwidth (in Mbps)
          required: false
          type: integer
          format: int32
        - name: virtualDeviceUUID
          in: query
          description: Virtual device UUID (only required if existing device is being modified)
          required: false
          type: string
        - name: secondaryAccountNumber
          in: query
          description: Secondary account number (for HA)
          required: false
          type: integer
          format: int32
        - name: secondaryMetro
          in: query
          description: Secondary metro (for HA)
          required: false
          type: string
        - name: secondaryAdditionalBandwidth
          in: query
          description: Secondary additional bandwidth (in Mbps for HA)
          required: false
          type: integer
          format: int32
        - name: accountUcmId
          in: query
          description: Account unique ID
          required: false
          type: string
        - name: orderingContact
          in: query
          description: Reseller customer username
          required: false
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/OrderSummaryResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/license/file:
    post:
      tags:
        - Virtual Device & Licensing
      summary: Upload a license file before creating a Virtual Device
      description: In case you want to bring your own license (BYOL), you can use this API to post a license file before creating a virtual device.
      operationId: uploadLicenseUsingPOST
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file
          in: formData
          description: file
          required: true
          type: file
        - name: metroCode
          in: query
          description: metroCode
          required: true
          type: string
        - name: deviceTypeCode
          in: query
          description: deviceTypeCode
          required: true
          type: string
        - name: licenseType
          in: query
          description: licenseType
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/LicenseUploadResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device:
    post:
      tags:
        - Virtual Device & Licensing
      summary: Create a Virtual Device
      description: Creates a virtual device. You can connect this device to various cloud service providers in minutes. The virtual device also allows instant configuration of additional services such as BGP and VPN. To try it out you must provide your own account number (check Get account status API). To create a device of your choice, use Get virtual device API to find available device details. This API can be used for <br />1. Create a Virtual Device  <br />2. Create a Virtual Device Draft by sending draft = true <br />3. Create a Virtual Device From Draft
      operationId: createVirtualDeviceUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: virtualDevice
          description: Create a virtual device (e.g., a router or a firewall)
          required: true
          schema:
            $ref: "#/definitions/VirtualDeviceRequest"
        - $ref: "#/parameters/authorizationHeader"
        - name: draft
          in: query
          description: draft
          required: false
          type: boolean
          default: false
        - name: draftUUID
          in: query
          description: draftUUID
          required: false
          type: string
      responses:
        "202":
          description: Request accepted. To check the status of your device please call Get virtual device by UUID API.
          schema:
            $ref: "#/definitions/VirtualDeviceCreateResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    get:
      tags:
        - Virtual Device & Licensing
      summary: Get Virtual Devices
      description: Gets all active virtual devices by user name and specified parameter(s)
      operationId: getVirtualDevicesUsingGET_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: page
          required: false
          type: integer
          default: 1
          format: int32
        - name: size
          in: query
          description: size
          required: false
          type: integer
          default: 20
          format: int32
        - name: metroCode
          in: query
          description: metroCode
          required: false
          type: string
        - name: status
          in: query
          description: status
          required: false
          type: string
        - name: globalCustId
          in: query
          description: globalCustId
          required: false
          type: string
        - name: accountUcmId
          in: query
          description: Unique ID of an account virtual
          required: false
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/VirtualDevicePageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/license/file/{uuid}:
    post:
      tags:
        - Virtual Device & Licensing
      summary: Upload a license file after creating a Virtual Device
      description: In case you want to bring your own license and have already created a virtual device, use this API to post a license file. You can also use this API to renew a license that is about to expire.
      operationId: uploadLicenseForDeviceUsingPOST
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: UUID of the virtual device
          required: true
          type: string
        - name: file
          in: formData
          description: License file
          required: true
          type: file
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/LicenseUploadResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/license/{virtualDeviceUUID}:
    post:
      tags:
        - Virtual Device & Licensing
      summary: Upload a license token after creating a Virtual Device
      description: If you want to bring your own license (BYOL), you can use this API to post or update a license token after a virtual device is created.
      operationId: updateLicenseUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: virtualDeviceUUID
          in: path
          description: UUID of virtual device
          required: true
          type: string
        - in: body
          name: request
          description: License token
          required: true
          schema:
            $ref: "#/definitions/LicenseUpdateRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "202":
          description: Accepted
          schema:
            $ref: "#/definitions/LicenseUploadResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/{uuid}:
    get:
      tags:
        - Virtual Device & Licensing
      summary: Get Virtual Device
      description: Gets a virtual device by UUID, if existing and authorized.
      operationId: getVirtualDeviceUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/VirtualDeviceDetailsResponse"
        "404":
          description: Resource Not found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    patch:
      tags:
        - Virtual Device & Licensing
      summary: Update a virtual Device
      description: This API can be used to update the virtual device
      operationId: updateVirtualDeviceUsingPATCH_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: The unique Id of the device.
          required: true
          type: string
        - in: body
          name: virtualDeviceUpdateRequestDto
          schema:
            "$ref": "#/definitions/VirtualDeviceInternalPatchRequestDto"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Accepted
          schema:
            "$ref": "#/definitions/VirtualDeviceCreateResponseDto"
        "202":
          description: Accepted
          schema:
            "$ref": "#/definitions/VirtualDeviceCreateResponseDto"
        "400":
          description: Bad request
          schema:
            "$ref": "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            "$ref": "#/definitions/ErrorMessageResponse"
    delete:
      tags:
        - Virtual Device & Licensing
      summary: Delete a Virtual Device
      description: Call this API to delete a virtual device on the Equinix platform. For some devices, e.g. Cisco CSR1000V, you just need to pass the device UUID as a path parameter, whereas for some other devices, e.g. Palo Alto devices, you also need a deactivation key as a body parameter.For HA devices, you must send a query parameter deleteRedundantDevice=True. As both primary and secondary devices are deleted simultaneously, the deleteRedundantDevice field must be marked True for Equinix to successfully delete a device that has a secondary device.
      operationId: deleteVRouterUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: Unique ID of the virtual device.
          required: true
          type: string
        - in: body
          name: deletionInfo
          description: deletionInfo
          required: false
          schema:
            $ref: "#/definitions/VirtualDeviceDeleteRequest"
        - name: deleteRedundantDevice
          in: query
          required: false
          type: boolean
          default: false
          description: Optional parameter in case you have a secondary device for high availability (HA). As both primary and secondary devices are deleted simultaneously, this field must be marked True for Equinix to successfully delete a device that has a secondary device.
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: The deletion is in progress. Call Get virtual device by UUID API to check the status of your deletion.
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "404":
          description: Resource not found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    put:
      tags:
        - Virtual Device & Licensing
      summary: Update virtual device draft
      description: This API is for updating a virtual device draft <br/>and does not support device update as of now.
      operationId: updateVirtualDeviceUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: draft
          in: query
          description: draft
          required: true
          type: boolean
          default: true
        - in: body
          name: virtualDevice
          description: Update virtual device details
          required: true
          schema:
            $ref: "#/definitions/VirtualDeviceRequest"
        - name: uuid
          in: path
          description: Virtual Device UUID
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/additionalbandwidth/{virtualDeviceUUID}:
    put:
      tags:
        - Virtual Device & Licensing
      summary: Update Additional Bandwidth
      description: |-
        Updates additional bandwidth configured on the virtual device.
        NOTE: Any changes may impact the current billing charges.
      operationId: updateAdditionalBandwidthUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: virtualDeviceUUID
          in: path
          description: Virtual Device UUID
          required: true
          type: string
        - in: body
          name: request
          description: Additional Bandwidth Update Request
          required: true
          schema:
            $ref: "#/definitions/AdditionalBandwidthUpdateRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/{uuid}/fqdn-acl:
    put:
      tags:
        - Virtual Device & Licensing
      summary: Update SSH Access
      description: This API is for updating SSH access configurations that has been provided during the device creation.
      operationId: updateDeviceSshAccessAclUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: request
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/FqdnAcl"
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: Updated Successfully
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/{uuid}/interfaces:
    get:
      tags:
        - Virtual Device & Licensing
      summary: Get Virtual Device Interfaces
      description:
        This API is for getting a particular virtual device interfaces
        for a given UUID
      operationId: getVirtualDeviceInterfacesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/InterfaceBasicInfoResponse"
        "404":
          description: Resource Not found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/ping/{virtualDeviceUUID}:
    get:
      tags:
        - Virtual Device & Licensing
      summary: Ping Virtual Device
      description: It pings virtual device to ensure that it's reachable, by providing the virtual device's UUID.
      operationId: pingDeviceUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: virtualDeviceUUID
          in: path
          description: Virtual Device UUID
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/device/link:
    post:
      tags:
        - Device Chaining
      summary: Create a device chaining group
      description: A device linking group can include any virtual device that is provisioned and registered unless the device interfaces are already full. To create a device linking group, you must have/provide the following:<br /> 1. At least two provisioned virtual devices with registered licenses. You must have the device UUIDs and the metro codes where the devices are located. As of now, you cannot link two devices in the same metro.<br />2. You need to provide ASNs for the devices if the ASNs have not been set. If a device already has an ASN, you can check the ASN by calling Get virtual devices API or Get virtual device{uuid} API.<br/> 3. Equinix billing account number. Your account must be in the Active or Pending status.<br/> 4. Choose a subnet for the group. You must choose a subnet keeping in mind the number of devices you wish to add to the group. This is not a mandatory field at the time you try to create a linking group, however, you must provide this to have a functional linking group.
      operationId: createChainingGroupUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: deviceChainingGroup
          description: New Device Chaining Group
          required: true
          schema:
            $ref: "#/definitions/DeviceChainingGroupRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "202":
          description: Unique ID of the device linking group.
          schema:
            $ref: "#/definitions/DeviceChainingGroupResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    get:
      tags:
        - Device Chaining
      description: This API returns list of chaining group and An array of metros and the devices in the metros belonging to the group.
      summary: Get list of matching chaining after applying filter
        groups
      operationId: getChainingGroupsUsingGET_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: metro
          in: query
          required: false
          type: string
          description: Metro Code
        - name: virtualDeviceUuid
          in: query
          required: false
          type: string
          description: Unique Id of a virtual device.
        - name: accountUcmId
          in: query
          required: false
          type: string
          description: Unique Id of the account. A reseller querying for a customer's linking groups can pass the accountUcmId of the customer's account. To get the accountUcmId of your customer's account, please check the Equinix account creation portal (ECP) or call Get account API.
        - name: pageNumber
          in: query
          description: Page number. Default value=1
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Results per page. Default value=100
          required: false
          type: integer
          default: 20
          format: int32
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/DeviceChainingGroupDto"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  "/ne/v1/device/link/{group-uuid}":
    get:
      tags:
        - Device Chaining
      summary: Get Chaining group by UUID
      description: This API will get device linking group by UUID and displays An array of metros and the devices in the metros belonging to the group.
      operationId: getChainingGroupByUUIDUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group-uuid
          in: path
          description: Unique Id of the device linking group.
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/DeviceChainingGroupDto"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    delete:
      tags:
        - Device Chaining
      summary: Delete Linking Group
      description: This API Deletes a device linking group. you can get group-uuid of the device by calling GET API
      operationId: deleteChainingGroupUsingDELETE
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: group-uuid
          in: path
          description: Unique Id of the device linking group.
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: Request fulfilled.
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "404":
          description: Resource not found
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  "/ne/v1/device/link/{group-uuid}/metro-throughput":
    patch:
      tags:
        - Device Chaining
      summary: Update metro throughput for a group UUID
      description: This API can be used to Update metro throughput for a group UUID
      operationId: updateChainingGroupMetroThroughputUsingPATCH
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: group-uuid
          description: The unique Id of the device linking group.
          in: path
          required: true
          type: string
        - in: body
          name: chainingGroupMetroThroughput
          description: Update metro throughput in Chaining Group
          required: true
          schema:
            $ref: "#/definitions/ChainingMetroThroughputPatchRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: Request fulfilled.
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  "/ne/v1/device/link/{group-uuid}/metro-devices":
    patch:
      tags:
        - Device Chaining
      summary: Update device to group/Remove device from group/metro
        throughput update
      description: Call this API to add/remove/update devices of a linking group. Please keep in mind that this API will remove a device from an existing device linking group unless you include the device and its details in the body.
      operationId: updateChainingGroupDevicesUsingPATCH
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: group-uuid
          in: path
          description: The unique Id of the device linking group.
          required: true
          type: string
        - in: body
          name: chainingGroupDevice
          description: Update Devices in Chaining Group
          required: true
          schema:
            $ref: "#/definitions/DeviceChainingGroupRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: Request fulfilled.
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  "/ne/v1/device/link/{group-uuid}/link-details":
    patch:
      tags:
        - Device Chaining
      summary: Update group name for a group UUID
      description: Call this API to update a linking group name and subnet
      operationId: updateChainingGroupDetailsUsingPATCH
      consumes:
        - application/json
      produces:
        - "*/*"
      parameters:
        - name: group-uuid
          in: path
          description: The unique Id of the group.
          required: true
          type: string
        - in: body
          name: deviceChainingGroupName
          description: Update group name of Chaining Group
          required: true
          schema:
            $ref: "#/definitions/ChainingGroupNameSubnetPatchRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: Request fulfilled.
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/l2/serviceprofiles/services:
    get:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Get Layer 2 Service Profiles
      description: Gets list of all active, valid Layer 2 service profiles.
      operationId: getProfilesByMetroUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: metroCode
          in: query
          description: metroCode
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pageNumber
          in: query
          description: page number
          required: false
          type: integer
          default: 0
          format: int32
        - name: pageSize
          in: query
          description: total number of records
          required: false
          type: integer
          default: 20
          format: int32
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetServProfServicesResp"
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "404":
          description: Record Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ne/v1/l2/serviceprofiles/services/{uuid}:
    get:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Get Service Profile based on the UUID
      description: Returns Layer 2 service profile details for a given uuid/customer.
      operationId: getProfileByIdUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetServProfServicesResp"
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "404":
          description: Record Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ne/v1/l2/buyer/connections:
    get:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Get All Buyer Connections to Services Profiles
      description: Gets all connections on the virtual device and to which service profiles (AWS, Azure or others) the connection has been made. This is useful to monitor the number of connections on existing virtual devices and the amount of bandwidth consumed by these connections.
      operationId: getAllBuyerConnectionsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: status
          in: query
          description: connection status
          required: false
          type: array
          items:
            type: string
            enum:
              - PROVISIONED
              - PENDING_APPROVAL
              - PROVISIONING
              - ORDERING
              - REJECTED
              - APPROVED
              - PENDING_DEPROVISIONING
              - PENDING_DELETE
              - DELETED
              - NOT_PROVISIONED
              - MIGRATION_STARTED
              - MIGRATION_DEPROVISIONED
              - MIGRATION_DEPROVISION_FAILED
              - MIGRATION_VLAN_RELEASED
              - MIGRATION_VLAN_RELEASE_FAILED
              - MIGRATION_VLAN_GENERATED
              - MIGRATION_VLAN_GENERATION_FAILED
              - MIGRATION_PROVISION_FAILED
          collectionFormat: multi
          enum:
            - PROVISIONED
            - PENDING_APPROVAL
            - PROVISIONING
            - ORDERING
            - REJECTED
            - APPROVED
            - PENDING_DEPROVISIONING
            - PENDING_DELETE
            - DELETED
            - NOT_PROVISIONED
            - MIGRATION_STARTED
            - MIGRATION_DEPROVISIONED
            - MIGRATION_DEPROVISION_FAILED
            - MIGRATION_VLAN_RELEASED
            - MIGRATION_VLAN_RELEASE_FAILED
            - MIGRATION_VLAN_GENERATED
            - MIGRATION_VLAN_GENERATION_FAILED
            - MIGRATION_PROVISION_FAILED
        - name: metroCode
          in: query
          description: Buyer metro code
          required: false
          type: string
        - name: buyerPortName
          in: query
          description: Buyer port name and buyer must have permission for that port
          required: false
          type: string
        - name: buyerPortUUID
          in: query
          description: Buyer port uuid.Buyer must have permission for that port
          required: false
          type: string
        - name: metadata
          in: query
          description: Metadata fields
          required: false
          type: string
        - name: searchType
          in: query
          description: AND or OR Value
          required: false
          type: string
          enum:
            - AND
            - OR
        - name: subAccount
          in: query
          required: false
          type: string
        - name: pageNumber
          in: query
          description: page number
          required: false
          type: integer
          default: 0
          format: int32
        - name: pageSize
          in: query
          description: total number of records
          required: false
          type: integer
          default: 20
          format: int32
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/GetBuyerConnectionResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ne/v1/l2/connections/validateAuthorizationKey:
    get:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Validate Authorization Key, Service Key or Pairing Key
      description: Validates authorization/service key or account ID to connect to cloud service providers. The participant must first use the provider console to establish a connection and obtain a valid account or service which could then be used to create connections to CSPs. Participants may validate their keys using this API.
      operationId: validateAuthorizationKeyUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: authorizationKey
          in: query
          description: Could be AWS Account ID or Azure Service Key or Google Pairing Key or Oracle connection Id or any other authorization key
          required: true
          type: string
        - name: metroCode
          in: query
          description: metroCode
          required: true
          type: string
        - name: profileId
          in: query
          description: profileId
          required: true
          type: string
        - name: region
          in: query
          description: region
          required: true
          type: string
        - name: Content-Type
          in: header
          description: Content-Type
          required: false
          type: string
          default: application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetValidateAuthKeyRes"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ne/v1/l2/connections:
    post:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Create Virtual Circuit in Azure, AWS, Google, Oracle or Other Cloud Services
      description: Creates a new Layer 2 connection on a virtual device to a cloud provider, another ECX participant or to your own assets in another metro. Equinix has integrated with the APIs of some of the more common cloud providers such as AWS, Azure, Google and Oracle to make creating connections as seamless as possible, although each of these providers has unique requirements. Please refer to the Use Cases section for more details regarding connection to specific cloud providers. API developers creating a connection will be required to know several attributes of their connection including the primary and secondary port, the VLAN(C - Tag and / or S - Tag), etc.These are described more in the swagger specs on the developer portal.
      operationId: createConnectionUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: "#/definitions/PostConnectionRequest"
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/PostConnectionResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ne/v1/l2/connections/{uuid}:
    patch:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Update Connection by UUID
      description: Update (or approve) connection to complete the provisioning or to perform any updates to the Layer 2 connection. It is typically used to accept a hosted connection.
      operationId: performUserActionUsingPATCH
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: action
          in: query
          description: action
          required: true
          type: string
        - name: uuid
          in: path
          description: connId
          required: true
          type: string
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      responses:
        "200":
          description: success
          schema:
            $ref: "#/definitions/DeleteConnectionResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Get Connection by UUID
      description: An ECX participant may wish to use an API to get specific details about an existing connection. For example, they may be interested in the allocated bandwidth on that connection in order to determine throughput options. Or they may want to know the VLAN tag on a particular connection, or even to what service profile (or cloud provider) the connection has been created.  Or they may want to know if the connection was successfully provisioned.
      operationId: getConnectionByUuidUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: uuid
          in: path
          description: Connection UUID
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/GETConnectionByUUidResponse"
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
        "404":
          description: Not Found
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - Layer 2 Connections & Service Profiles
      summary: Delete Connection by UUID
      description: Deletes a virtual connection on ECX based on the connection UUID. Once a connection has been successfully deleted, billing for that connections will also be stopped.
      operationId: deleteConnectionUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: "#/parameters/authorizationHeader"
        - name: uuid
          in: path
          description: connId
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/DeleteConnectionResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponseArray"
  /ne/v1/services/bgp:
    post:
      tags:
        - Services
      summary: Creates BGP Peering
      description: Creates a BGP session to establish a point-to-point connection between your virtual device and cloud service provider. To create BGP peers, you must have a virtual device that is provisioned and registered and a provisioned connection.
      operationId: addBgpConfigurationUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: BGP configuration details
          required: false
          schema:
            $ref: "#/definitions/BgpConfigAddRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "202":
          description: Accepted
          schema:
            $ref: "#/definitions/BgpAsyncResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/bgp/{uuid}:
    put:
      tags:
        - Services
      summary: Update BGP Peering
      description: Updates a BGP peering configuration by UUID, if existing and authorized.
      operationId: updateBgpConfigurationUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - in: body
          name: request
          description: BGP config
          required: false
          schema:
            $ref: "#/definitions/BgpUpdateRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "202":
          description: Accepted
          schema:
            $ref: "#/definitions/BgpAsyncResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    get:
      tags:
        - Services
      summary: Get BGP Peering
      description: Gets a BGP peering configuration by UUID, if existing and authorized.
      operationId: getBgpConfigurationUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/BgpInfo"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/bgp/connection/{connectionUUID}:
    get:
      tags:
        - Services
      summary: Get BGP Peering for a connection
      description: Gets a BGP peering configuration by connection UUID, if existing and authorized.
      operationId: getBgpConfigurationByConnection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: connectionUUID
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/BgpInfo"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/bgp/connections:
    get:
      tags:
        - Services
      summary: Get Connections (With BGP)
      description: Gets all connections with BGP configuration, if any and authorized.
      operationId: getConnectionsWithBgpInfoUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: virtualDeviceUUID
          in: query
          description: virtualDeviceUUID
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/BgpConnectionInfo"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/vpn:
    post:
      tags:
        - Services
      summary: Create VPN Configuration
      description: Creates a VPN configuration which uses an IPSec tunnel and an associated BGP to allow a remote site to receive traffic originating from clouds connected to the data interfaces of your virtual device. You must have a provisioned virtual device with a registered license (should support IPSec protocol) and at least one connection (with valid BGP) to create a VPN.
      operationId: createVpnUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: VPN info
          required: false
          schema:
            $ref: "#/definitions/Vpn"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "201":
          description: Created Successfully
          schema:
            type: object
            additionalProperties:
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    get:
      tags:
        - Services
      summary: Get VPN Configurations
      description: Gets all VPN configurations by user name and specified parameter(s), if any and authorized.
      operationId: getVpnsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: statusList
          in: query
          description: One or more desired status
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          enum:
            - PROVISIONED
            - PROVISIONING
            - PROVISIONING_RETRYING
            - UPDATING
            - PROVISIONING_UPDATE_RETRYING
            - DEPROVISIONED
            - DEPROVISIONING
            - DEPROVISIONING_RETRYING
            - PROVISIONING_FAILED
            - PROVISIONING_UPDATE_FAILED
            - DEPROVISIONING_FAILED
        - name: virtualDeviceUUID
          in: query
          description: Virtual Device UUID
          required: false
          type: string
        - name: pageNumber
          in: query
          description: page number
          required: false
          type: integer
          default: 0
          format: int32
        - name: pageSize
          in: query
          description: total number of records
          required: false
          type: integer
          default: 20
          format: int32
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/PageResponseDto"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"

  /ne/v1/services/vpn/{uuid}:
    get:
      tags:
        - Services
      summary: Get VPN Configuration
      description: Gets a VPN configuration by UUID, if existing and authorized.
      operationId: getVpnByUuidUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Read Successfully
          schema:
            $ref: "#/definitions/VpnResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not found
          schema:
            type: string
            enum:
              - INTERNAL_SERVER_ERROR
              - INVALID_JSON_FORMAT
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED_USER
              - INVALID_REQUEST_FORMAT
              - ZONE_NOT_FOUND
              - SOURCE_ZONE_NOT_FOUND
              - DESTINATION_ZONE_NOT_FOUND
              - ZONES_NOT_PART_SAME_DEVICE
              - CONNECTION_ALREADY_PART_OF_ZONE
              - ZONE_PART_OF_FIREWALL
              - CONNECTION_NOT_AVAILABLE
              - ZONE_ALREADY_EXISTS
              - FIREWALL_NOT_FOUND
              - FIREWALL_ALREADY_EXISTS
              - RULE_ALREADY_EXISTS
              - RULE_NOT_FOUND
              - RULE_NOT_PART_OF_FIREWALL
              - VIRTUAL_DEVICE_NOT_FOUND
              - VIRTUAL_DEVICE_NOT_PROVISIONED
              - DEVICE_LICENSE_NOT_REGISTERED
              - MGMT_INTERFACE_NOT_AVAILABLE
              - INTERFACE_NOT_AVAILABLE
              - INTERFACE_NOT_PROVISIONED
              - NAT_CONFIG_ALREADY_EXISTS
              - NAT_CONFIG_NOT_FOUND
              - ADD_NAT_CONFIG_FAILED
              - EDIT_NAT_CONFIG_FAILED
              - REMOVE_NAT_CONFIG_FAILED
              - NAT_POOL_TYPE_CHANGE_DISABLED
              - INVALID_ACTION_TYPE
              - INVALID_ADD_ACTION
              - INVALID_MODIFY_ACTION
              - INVALID_STATIC_NAT_UUID
              - OVERLAP_IP_CONFLICT
              - CONNECTION_NOT_FOUND
              - BGP_NOT_FOUND
              - INVALID_IP_ADDRESS
              - INVALID_NETWORK_SERVICE_TYPE
              - IBX_NOT_FOUND
              - PRICE_SERVICE_REQUEST_INVALID
              - PRICE_SERVICE_REQUEST_FAILED
              - BGP_CONFIG_NOT_FOUND
              - BGP_NEIGHBOR_INFO_NOT_FOUND
              - LOCAL_IP_ADDRESS_NOT_IN_RANGE
              - REMOTE_IP_ADDRESS_NOT_IN_RANGE
              - CONNECTION_DEVICE_NOT_FOUND
              - CONNECTION_NOT_PROVISIONED
              - BROADCAST_ADDRESS_NOT_ALLOWED
              - NETWORK_ADDRESS_NOT_ALLOWED
              - OVERLAP_LOCAL_IP_ADDRESS
              - DATA_INTERFACE_NOT_AVAILABLE
              - ADD_BGP_CONFIG_FAILED
              - REMOVE_BGP_CONFIG_FAILED
              - INTERFACE_NOT_FOUND
              - UPDATE_BGP_CONFIG_FAILED
              - EXISTING_CONNECTION_BGP
              - BGP_EXISTING_NAT_SERVICES
              - BGP_EXISTING_FIREWALL_SERVICES
              - BGP_UPDATE_NOT_ALLOWED
              - BGP_EXISTING_VPN_SERVICES
              - REMOTE_LOCAL_SAME_IP_ADDRESS
              - BGP_FAILED_ASN_UPDATE
              - BGP_FAILED_INTERFACE_DESC
              - BGP_NSO_FAILED_FETCH
              - BGP_NSO_FAILED_UPDATE
              - BGP_FAILED_VPN_UPDATE
              - BGP_RETRY_FAILED
              - VPN_NAME_ALREADY_IN_USE
              - VPN_DEVICE_NOT_FOUND
              - VPN_DEVICE_USER_KEY_MISMATCH
              - VPN_DEVICE_NOT_REGISTERED
              - VPN_NO_CONFIGURED_CLOUD_BGP_FOUND
              - VPN_DEVICE_ASN_NOT_CONFIGURED
              - VPN_MATCHING_ASN
              - VPN_LIMIT_EXCEEDED
              - VPN_NO_INTERFACES_FOUND
              - VPN_SSH_INTERFACE_ID_NOT_FOUND
              - VPN_INVALID_SSH_INTERFACE_ID
              - VPN_CONFIG_NOT_FOUND
              - VPN_NSO_CREATE_TRANSIENT_FAILURE
              - VPN_NSO_CREATE_PERMANENT_FAILURE
              - VPN_NSO_DELETE_TRANSIENT_FAILURE
              - VPN_NSO_DELETE_PERMANENT_FAILURE
              - VPN_PEER_IP_ALREADY_IN_USE
              - VPN_DEVICE_MISSING_IPSEC_PACKAGE
              - VPN_INVALID_STATUS_LIST
              - VPN_RESTRICTED_ASN
              - VPN_UNAUTHORIZED_ACCESS
              - VPN_ALREADY_DELETED
              - VPN_RESTRICTED_IP_ADDRESS
              - VPN_DEVICE_NOT_IN_READY_STATE
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    delete:
      tags:
        - Services
      summary: Delete VPN Configuration
      description: Deletes a VPN configuration by UUID, if existing and authorized.
      operationId: removeVpnConfigurationUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/ssh-user:
    get:
      tags:
        - Services
      summary: Get List of all SSH Users with details
      description: If device UUID is specified then only those users which are associated with this device are returned.
      operationId: getSshUsersUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: SSH user name
          required: false
          type: string
        - name: virtualDeviceUUID
          in: query
          description: Virtual Device UUID
          required: false
          type: string
        - name: verbose
          in: query
          description: Is Detailed info required
          required: false
          type: boolean
        - name: pageNumber
          in: query
          description: page number
          required: false
          type: integer
          default: 0
          format: int32
        - name: pageSize
          in: query
          description: number of records per page
          required: false
          type: integer
          default: 20
          format: int32
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/PageResponseDto"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    post:
      tags:
        - Services
      summary: Create a New SSH User for my customer org and associate to the provided Device
      description: This user can be associated to other devices using the uuid which is returned as response to this API.
      operationId: createSshUserUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          description: SSH user info
          required: false
          schema:
            $ref: "#/definitions/SshUserCreateRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "201":
          description: Created Successfully
          schema:
            $ref: "#/definitions/SshUserCreateResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/ssh-user/availability:
    get:
      tags:
        - Services
      summary: Check whether a SSH user name is available for creation
      description: Failure response indicates that the given user name either already exists or is restricted.
      operationId: isSshUserAvailableForCreationUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: user name
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "204":
          description: User name available for creation
        "400":
          description: Invalid input
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/ssh-user/{uuid}:
    get:
      tags:
        - Services
      summary: Get SSH user info by user name
      description: Returns ssh user details like device associations and metro specific status
      operationId: getSshUserUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: Read Successfully
          schema:
            $ref: "#/definitions/SshUserInfoVerbose"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not found
          schema:
            type: string
            enum:
              - INTERNAL_SERVER_ERROR
              - INVALID_JSON_FORMAT
              - RESOURCE_NOT_FOUND
              - UNAUTHORIZED_USER
              - INVALID_REQUEST_FORMAT
              - ZONE_NOT_FOUND
              - SOURCE_ZONE_NOT_FOUND
              - DESTINATION_ZONE_NOT_FOUND
              - ZONES_NOT_PART_SAME_DEVICE
              - CONNECTION_ALREADY_PART_OF_ZONE
              - ZONE_PART_OF_FIREWALL
              - CONNECTION_NOT_AVAILABLE
              - ZONE_ALREADY_EXISTS
              - FIREWALL_NOT_FOUND
              - FIREWALL_ALREADY_EXISTS
              - RULE_ALREADY_EXISTS
              - RULE_NOT_FOUND
              - RULE_NOT_PART_OF_FIREWALL
              - VIRTUAL_DEVICE_NOT_FOUND
              - VIRTUAL_DEVICE_NOT_PROVISIONED
              - DEVICE_LICENSE_NOT_REGISTERED
              - MGMT_INTERFACE_NOT_AVAILABLE
              - INTERFACE_NOT_AVAILABLE
              - INTERFACE_NOT_PROVISIONED
              - NAT_CONFIG_ALREADY_EXISTS
              - NAT_CONFIG_NOT_FOUND
              - ADD_NAT_CONFIG_FAILED
              - EDIT_NAT_CONFIG_FAILED
              - REMOVE_NAT_CONFIG_FAILED
              - NAT_POOL_TYPE_CHANGE_DISABLED
              - INVALID_ACTION_TYPE
              - INVALID_ADD_ACTION
              - INVALID_MODIFY_ACTION
              - INVALID_STATIC_NAT_UUID
              - OVERLAP_IP_CONFLICT
              - CONNECTION_NOT_FOUND
              - BGP_NOT_FOUND
              - INVALID_IP_ADDRESS
              - INVALID_NETWORK_SERVICE_TYPE
              - ERROR_DELETING_CONNECTION
              - IBX_NOT_FOUND
              - PRICE_SERVICE_REQUEST_INVALID
              - PRICE_SERVICE_REQUEST_FAILED
              - BGP_CONFIG_NOT_FOUND
              - BGP_NEIGHBOR_INFO_NOT_FOUND
              - LOCAL_IP_ADDRESS_NOT_IN_RANGE
              - REMOTE_IP_ADDRESS_NOT_IN_RANGE
              - CONNECTION_DEVICE_NOT_FOUND
              - CONNECTION_NOT_PROVISIONED
              - BROADCAST_ADDRESS_NOT_ALLOWED
              - NETWORK_ADDRESS_NOT_ALLOWED
              - OVERLAP_LOCAL_IP_ADDRESS
              - DATA_INTERFACE_NOT_AVAILABLE
              - ADD_BGP_CONFIG_FAILED
              - REMOVE_BGP_CONFIG_FAILED
              - INTERFACE_NOT_FOUND
              - UPDATE_BGP_CONFIG_FAILED
              - EXISTING_CONNECTION_BGP
              - BGP_EXISTING_NAT_SERVICES
              - BGP_EXISTING_FIREWALL_SERVICES
              - BGP_UPDATE_NOT_ALLOWED
              - BGP_EXISTING_VPN_SERVICES
              - REMOTE_LOCAL_SAME_IP_ADDRESS
              - BGP_FAILED_ASN_UPDATE
              - BGP_FAILED_INTERFACE_DESC
              - BGP_NSO_FAILED_FETCH
              - BGP_NSO_FAILED_UPDATE
              - BGP_FAILED_VPN_UPDATE
              - BGP_RETRY_FAILED
              - BGP_NOT_SUPPORTED
              - BGP_MULTI_ASN_NOT_SUPPORTED
              - VPN_NAME_ALREADY_IN_USE
              - VPN_DEVICE_NOT_FOUND
              - VPN_DEVICE_CUST_ORG_MISMATCH
              - VPN_DEVICE_NOT_REGISTERED
              - VPN_NO_CONFIGURED_CLOUD_BGP_FOUND
              - VPN_DEVICE_ASN_NOT_CONFIGURED
              - VPN_MATCHING_ASN
              - VPN_LIMIT_EXCEEDED
              - VPN_NO_INTERFACES_FOUND
              - VPN_SSH_INTERFACE_ID_NOT_FOUND
              - VPN_INVALID_SSH_INTERFACE_ID
              - VPN_CONFIG_NOT_FOUND
              - VPN_NSO_CREATE_TRANSIENT_FAILURE
              - VPN_NSO_CREATE_PERMANENT_FAILURE
              - VPN_NSO_DELETE_TRANSIENT_FAILURE
              - VPN_NSO_DELETE_PERMANENT_FAILURE
              - VPN_PEER_IP_ALREADY_IN_USE
              - VPN_DEVICE_MISSING_IPSEC_PACKAGE
              - VPN_INVALID_STATUS_LIST
              - VPN_RESTRICTED_ASN
              - VPN_UNAUTHORIZED_ACCESS
              - VPN_ALREADY_DELETED
              - VPN_RESTRICTED_IP_ADDRESS
              - VPN_NSO_UPDATE_TRANSIENT_FAILURE
              - VPN_NSO_UPDATE_PERMANENT_FAILURE
              - VPN_IN_PROVISIONING_STATE
              - VPN_TUNNEL_IP_OVERLAPS_DATA_BGP
              - VPN_TUNNEL_IP_OVERLAP
              - VPN_REMOTE_IP_SAME_AS_EXISTING_DATA_BGP
              - VPN_REMOTE_IP_ALREADY_IN_USE
              - VPN_REMOTE_IP_INVALID_FIRST_OCTET
              - VPN_TUNNEL_IP_INVALID_FIRST_OCTET
              - VPN_DEVICE_SSH_NOT_CONFIGURED
              - VPN_HA_SECONDARY_REQUEST_REQUIRED
              - VPN_HA_SECONDARY_DEVICE_REQUIRED
              - VPN_HA_ROLLED_BACK
              - VPN_HA_REDUNDANT_VPN_DELETED
              - VPN_STATUS_UPDATE_FAILED
              - VPN_STATUS_UPDATE_PROCESS_FAILED
              - VPN_DEVICE_CLOUD_SEQ_ID_NOT_CONFIGURED
              - SSH_CREATE_USER_FAILED
              - SSH_DELETE_USER_FAILED
              - TACACS_GET_USERS_FAILED
              - SSH_GET_USER_FAILED
              - SSH_UPDATE_USER_FAILED
              - SSH_REPLACE_DEVICE_ASSOCIATION_FAILED
              - SSH_APPEND_DEVICE_ASSOCIATION_FAILED
              - SSH_USER_ALREADY_EXISTS
              - SSH_USER_PARTIAL_FAILURE
              - SSH_USER_SERVICE_NOT_SUPPORTED
              - SSH_USER_UNAUTHORIZED_ACCESS
              - SSH_USER_DELETE_FAILED_ASSOCIATIONS_EXIST
              - SSH_USER_DEVICE_NOT_REGISTERED
              - SSH_USER_DEVICE_STATE_NOT_VALID
              - SSH_USER_PER_DEVICE_LIMIT_EXCEEDED
              - SSH_USER_DEVICE_IP_ADDRESS_NOT_SET
              - UNABLE_TO_GET_DEVICE_COUNT
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    put:
      tags:
        - Services
      summary: Update the password for a SSH User
      description: Update password for SSH user for the given cust org. At this time password is the only information that is available for modification.
      operationId: updateSshUserUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - in: body
          name: request
          description: SSH user info
          required: false
          schema:
            $ref: "#/definitions/SshUserUpdateRequest"
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
  /ne/v1/services/ssh-user/{uuid}/association:
    delete:
      tags:
        - Services
      summary: Dissociate a device from this SSH User. Delete the ssh user if it was the last device association
      description: The given SSH user is dissociated from the given device uuid. The ssh user is deleted if this was the last device that was associated to this user. The response indicates whether the ssh user was deleted as a result of this operation.
      operationId: dissociateDeviceUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - name: deviceUuid
          in: query
          description: device UUID
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/SshUserInfoDissociateResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
    patch:
      tags:
        - Services
      summary: Associate a device to this SSH User
      description: The given SSH user is associated to the given device uuid. The ssh user should be able to log onto this device if this operation is successful.
      operationId: associateDeviceUsingPATCH
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: uuid
          required: true
          type: string
        - name: deviceUuid
          in: query
          description: device UUID
          required: true
          type: string
        - $ref: "#/parameters/authorizationHeader"
      responses:
        "201":
          description: Created Successfully
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "403":
          description: Unauthorized User
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "404":
          description: Resource Not Found
          schema:
            $ref: "#/definitions/FieldErrorResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/ErrorMessageResponse"
definitions:
  AgreementStatusResponse:
    type: object
    properties:
      errorMessage:
        type: string
      isValid:
        type: string
      terms:
        type: string
      termsVersionID:
        type: string
  AgreementAcceptRequest:
    type: object
    properties:
      accountNumber:
        type: string
      apttusId:
        type: string
  AgreementAcceptResponse:
    type: object
    properties:
      status:
        type: string
  SshUserCreateRequest:
    type: object
    required:
      - deviceUuid
      - password
      - username
    properties:
      username:
        type: string
        example: user1
        description: At least 3 and upto a maximum of 32 alphanumeric characters. The only special characters allowed are - _
      password:
        type: string
        example: pass12
        description: At least 6 and upto a maximum of 12 alphanumeric characters. The only special characters allowed are - _ $ @
      deviceUuid:
        type: string
        example: 3da0a663-20d9-4b8f-8c5d-d5cf706840c8
  SshUserCreateResponse:
    type: object
    properties:
      uuid:
        type: string
        example: 12828472-e6e9-4f2b-98f7-b79cf0fab4ff
  SshUserInfoVerbose:
    type: object
    properties:
      deviceUuids:
        type: array
        description: Set of uuids of the devices associated with this user
        items:
          type: string
      metroStatusMap:
        type: object
        description: Status and error messages corresponding to the metros this user exists on
        additionalProperties:
          $ref: "#/definitions/MetroStatus"
      metros:
        type: array
        description: Set of metros this user exists on
        items:
          type: string
      username:
        type: string
      uuid:
        type: string
  SshUserUpdateRequest:
    type: object
    required:
      - password
    properties:
      password:
        type: string
        example: pass12
        description: At least 6 and upto a maximum of 12 alphanumeric characters. The only special characters allowed are - _ $ @
  SshUserInfoDissociateResponse:
    type: object
    properties:
      sshUserDeleted:
        type: boolean
        example: false
        description: true = the ssh user has been deleted since there are no more devices associated to this userfalse = the ssh user has not been deleted since some associations to devices exist.
      sshUserToDeviceAssociationDeleted:
        type: boolean
        example: true
  MetroStatus:
    type: object
    properties:
      created:
        type: boolean
      deviceToIpMap:
        type: object
        additionalProperties:
          type: string
      errorCode:
        type: string
      errorMessage:
        type: string
      status:
        type: string
  AdditionalBandwidthUpdateRequest:
    type: object
    required:
      - additionalBandwidth
    properties:
      additionalBandwidth:
        type: integer
        format: int32
        example: 200
        description: Additional bandwidth to be configured on virtual device
  InterfaceBasicInfoResponseDto:
    type: object
    properties:
      description:
        type: string
        example: ethernet1
      name:
        type: string
        example: ethernet1
      status:
        type: string
        example: ASSIGNED
  VirtualDeviceDeleteRequest:
    type: object
    properties:
      deactivationKey:
        type: string
        example: 8dfbd5ba3610234d9e550032603cc34762af140533e2c1de0111d3451d16eefd
        description: Some devices, e.g. Palo Alto devices, require a mandatory deactivation key for Equinix to successfully process the request.
      secondary:
        $ref: "#/definitions/SecondaryDeviceDeleteRequest"
  SecondaryDeviceDeleteRequest:
    type: object
    properties:
      deactivationKey:
        type: string
        example: 8dfbd5ba3610234d9e550032603cc34762af140533e2c1de0111d3451d16eefd
        description: Object that holds the secondary deactivation key for HA (high availability) devices.
  OAuthRequest:
    type: object
    properties:
      grant_type:
        type: string
        example: client_credentials
      user_name:
        type: string
        example: sandboxuser@example-company.com
      user_password:
        type: string
        example: password
      client_id:
        type: string
        example: xxxxxxNxxTkxxxxxxxxxtm0xxxxxxxxx
      client_secret:
        type: string
        example: xxxxxxxx7jxxxxxxy
  OAuthErrorResponse:
    type: object
    properties:
      errorDomain:
        type: string
        example: apps-fqa
      errorTitle:
        type: string
        example: Invalid Username/Password
      errorCode:
        type: string
        example: S1003
      developerMessage:
        type: string
        example: Invalid Username/Password
      errorMessage:
        type: string
        example: Username or password wasn't recognized, please try again.
  OAuthResponse:
    type: object
    properties:
      access_token:
        type: string
        example: xxxxBxxitwxxxxx8xxRxxxxxR2xx
      token_timeout:
        type: integer
        example: 3599
      user_name:
        type: string
        example: sandboxuser@example-company.com
      token_type:
        type: string
        example: Bearer
      refresh_token:
        type: string
        example: xxxxQbGUnxxxxHsyxxxxxxxBBxxxxYxxxxxxxf4xxx
      refresh_token_timeout:
        type: string
        example: 5182560
  VirtualDeviceCreateResponse:
    type: object
    properties:
      uuid:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
  ErrorMessageResponse:
    type: object
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
      moreInfo:
        type: string
      property:
        type: string
  VirtualDeviceResponse:
    type: object
    properties:
      accountName:
        type: string
        example: ABC INC
      accountNumber:
        type: string
        example: "133911"
      createdBy:
        type: string
        example: cust0001
      createdDate:
        type: string
        example: "2018-01-30T10:30:31.387Z"
      deviceSerialNo:
        type: string
        example: "53791666484"
      deviceTypeCategory:
        type: string
        example: ROUTER
      deviceTypeCode:
        type: string
        example: CSR1000V
      deviceTypeName:
        type: string
        example: CSR 1000v
      expiry:
        type: string
        example: 2019-02-07 00:00:00
      region:
        type: string
        example: AMER
      deviceTypeVendor:
        type: string
        example: Cisco
      hostName:
        type: string
        example: VR-SV-CSR1000V-cust0001-1
      uuid:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
      lastUpdatedBy:
        type: string
        example: cust0002
      lastUpdatedDate:
        type: string
        example: "2018-01-30T10:30:31.387Z"
      licenseFileId:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
      licenseName:
        type: string
        example: Bring your own license
      licenseStatus:
        type: string
        example: REGISTERED
      licenseType:
        type: string
        example: BYOL
      metroCode:
        type: string
        example: SV
      metroName:
        type: string
        example: Silicon Valley
      name:
        type: string
        example: AWS-Azure-Router-csr1000v
      notifications:
        type: array
        items:
          type: string
        example: [test@equinix.com, test1@eqinix.com]
      packageCode:
        type: string
        example: IPBASE
      packageName:
        type: string
        example: IPBASE
      purchaseOrderNumber:
        type: string
        example: PO1223
      redundancyType:
        type: string
        example: PRIMARY
      redundantUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa67xx
      sshIpAddress:
        type: string
        example: 10.195.11.23
      sshIpFqdn:
        type: string
        example: test-device-168-201-97-149.eis.lab.equinix.com
      status:
        type: string
        example: PROVISIONED
      throughput:
        type: integer
        format: int32
        example: 500
      throughputUnit:
        type: string
        example: Mbps
      acl:
        type: array
        items:
          type: string
        example: ["192.168.1.1/32", "192.168.94.0/24"]
      managementIp:
        type: string
        example: 10.195.237.228/26
      managementGatewayIp:
        type: string
        example: 10.195.237.254
      publicIp:
        type: string
        example: 149.97.198.95/31
      publicGatewayIp:
        type: string
        example: 149.97.198.94
      primaryDnsName:
        type: string
        example: 4.0.0.53
      secondaryDnsName:
        type: string
        example: 129.250.35.250
      termLength:
        type: integer
        example: 12
      additionalBandwidth:
        type: integer
        example: 200
      siteId:
        type: string
        example: "12345"
      systemIpAddress:
        type: string
        example: 192.168.2.5
      version:
        type: string
        example: "6.0.4"
  PageResponseDto-VirtualDeviceType:
    type: object
    properties:
      content:
        type: array
        description: Array of available virtual device types
        items:
          $ref: "#/definitions/VirtualDeviceType"
      pageNumber:
        type: integer
        format: int32
        description: Page number
      pageSize:
        type: integer
        format: int32
        description: Number of results on a page
      totalCount:
        type: integer
        format: int64
        description: Total count
  Throughput:
    type: object
    properties:
      throughput:
        type: integer
        format: int32
        example: 500
      throughputUnit:
        type: string
        example: Mbps
  OptionalService:
    type: object
    properties:
      name:
        type: string
        example: VPN
      serviceCode:
        type: string
        example: VPN
  Throwable:
    type: object
    properties:
      cause:
        $ref: "#/definitions/Throwable"
      localizedMessage:
        type: string
      message:
        type: string
      stackTrace:
        type: array
        items:
          $ref: "#/definitions/StackTraceElement"
      suppressed:
        type: array
        items:
          $ref: "#/definitions/Throwable"
  CustomerInfo:
    type: object
    properties:
      city:
        type: string
        description: City
        example: San Jose
      country:
        type: string
        description: Country
        example: USA
      name:
        type: string
        description: Customer name
        example: Volta Mac
      postalCode:
        type: string
        description: Postal code
        example: 95131
      state:
        type: string
        description: State
        example: CA
      street:
        type: string
        description: Street
        example: 2000 Junesong Court
  sshUsers:
    type: object
    properties:
      sshUsername:
        type: string
        description: sshUsername. This should be minimum 3 and maximum 32 characters and include alphanumeric characters, dash, and underscore.
        example: cust0001_DC
      sshPassword:
        type: string
        description: sshPassword
        example: projPass
      sshUserUuid:
        type: string
        description: sshUserUuid
        example: 999a3aa2-c49a-dddd-98a6-007424e73777
      action:
        type: string
        description: action
        example: CREATE
  SshAccessUpdateRequest:
    type: object
    properties:
      sshAcl:
        type: array
        items:
          type: object
  VirtualDeviceUpdateRequest:
    type: object
    properties:
      virtualDeviceName:
        type: string
        example: Router1-csr1000v
        description: Virtual Device Name
  LicenseFileMappingDto:
    type: object
    properties:
      filename:
        type: string
      throughput:
        type: integer
        format: int32
      throughputUnit:
        type: string
  SoftwarePackage:
    type: object
    properties:
      name:
        type: string
        description: Software package name
        example: Security
      packageCode:
        type: string
        example: SEC
        description: Software package code
  Metadata:
    type: object
    properties:
      supportedInterfaceCount:
        type: integer
        format: int32
  StackTraceElement:
    type: object
    properties:
      className:
        type: string
      fileName:
        type: string
      lineNumber:
        type: integer
        format: int32
      methodName:
        type: string
      nativeMethod:
        type: boolean
  VirtualDeviceType:
    type: object
    properties:
      availableMetros:
        type: array
        description: Array of metros where the device is available
        items:
          $ref: "#/definitions/Metro"
      category:
        type: string
        example: ROUTER
        description: Type of virtual device, whether router or firewall
      description:
        type: string
        example:
          Extend your enterprise network to public and private clouds with
          the CSR 1000V series.
        description: Device description
      deviceTypeCode:
        type: string
        example: CSR1000V
        description: Device type code
      licenseOptions:
        type: array
        description: Array of available license options, subscription or BYOL (Bring Your Own License)
        items:
          $ref: "#/definitions/LicenseOptions"
      name:
        type: string
        description: Name of the device
        example: CSR 1000V
      softwarePackages:
        type: array
        description: Array of available software packages
        items:
          $ref: "#/definitions/SoftwarePackage"
      throughputOptions:
        type: array
        description: Array of available throughput options
        items:
          $ref: "#/definitions/Throughput"
      vendor:
        type: string
        description: Vendor of the device
        example: Cisco
  LicenseOptions:
    type: object
    properties:
      name:
        type: string
        description: License name
        example: Subscription
      type:
        description: License type
        type: string
        example: Sub
  VirtualDeviceRequest:
    type: object
    required:
      - deviceTypeCode
      - virtualDeviceName
      - hostNamePrefix
      - licenseMode
      - metroCode
      - notifications
    properties:
      accountNumber:
        type: string
        example: 10478397
        description: Account number. Either an account number or accountReferenceId is required.
      accountReferenceId:
        type: string
        example: 209809
        description: AccountReferenceId. This is a temporary ID that can be used to create a device when the account status is still pending, not active. Either an account number or accountReferenceId is required.
      deviceTypeCode:
        type: string
        example: CSR1000V
        description: Virtual device type (device type code)
      hostNamePrefix:
        type: string
        example: mySR
        description: Host name prefix for identification. Only a-z, A-Z, 0-9 and hyphen(-) are allowed. It should start with a letter and end with a letter or a digit. Also, it should be minimum 2 and maximum 10 characters long.
      licenseFileId:
        type: string
        example: d6e21e0c-86dd-11e8-adc0-fa7ae01bbebc
        description: For Juniper devices you need to provide a licenseFileId if you want to BYOL (Bring Your Own License). You get a licenseFileId when you upload a license file by calling license upload API (Upload a license file before creating a virtual device). For Cisco devices, you do not need to provide a licenseFileId at the time of device creation. Once the device is provisioned, you can get the deviceSerialNo by calling Get virtual device by UUID API. With the deviceSerialNo you can generate a license file on Cisco site. Afterward, you can upload the license file by calling license upload API (Upload a license file after creating a virtual device).
      licenseMode:
        type: string
        example: SUB
        description: License type. One of SUB (Subscription) or BYOL (Bring Your Own License)
      licenseToken:
        type: string
        example: V74191621
        description: In case you want to BYOL (Bring Your Own License) for a Palo Alto device, you must provide a license token. This field must have 8 alphanumeric characters.
      metroCode:
        type: string
        example: SV
        description: Metro code
      packageCode:
        type: string
        example: IPBASE
        description: Software package code
      sshUsers:
        type: array
        description: Array of sshUsernames and passwords
        items:
          $ref: "#/definitions/sshUsers"
      throughput:
        type: integer
        format: int32
        example: 1
        description: Device throughput. This is required for Cisco and Juniper devices.
      throughputUnit:
        type: string
        example: Gbps
        description: Throughput unit. This is required for Cisco and Juniper devices.
      virtualDeviceName:
        type: string
        example: Router1-csr1000v
        description: Virtual device name for identification. This should be minimum 3 and maximum 50 characters long.
      notifications:
        type: array
        items:
          type: string
        example: [test1@equinix.com, test2@equinix.com]
        description: Email addresses for notification. We need a minimum of 1 and no more than 5 email addresses.
      fqdnAcl:
        type: array
        items:
          $ref: "#/definitions/FqdnAcl"
      additionalBandwidth:
        type: integer
        format: int32
        example: 100
        description:
          Secondary additional bandwidth to be configured (in Mbps for
          HA). Default bandwidth provided is 15 Mbps.
      siteId:
        type: string
        example: "12345"
      systemIpAddress:
        type: string
        example: 192.168.2.5
      licenseKey:
        type: string
        example: "6735-vwe64568-6a91-4112-8734-bea12d91f7y7"
      licenseSecret:
        type: string
        example: "h5j0i45e83324pblbfca764532c4a640e7801f0"
      version:
        type: string
        example: "6.0.4"
      interfaceCount:
        type: integer
        format: int32
        example: 2
      core:
        type: integer
        format: int32
        example: 2
      deviceManagementType:
        type: string
        example: EQUINIX-CONFIGURED
      secondary:
        $ref: "#/definitions/VirtualDevicHARequest"
  VirtualDevicHARequest:
    type: object
    required:
      - metroCode
      - notifications
      - virtualDeviceName
    properties:
      accountNumber:
        type: string
        example: 10478398
      accountReferenceId:
        type: string
        example: 209805
      additionalBandwidth:
        type: integer
        format: int32
        example: 100
        description:
          Secondary additional bandwidth to be configured (in Mbps for
          HA). Default bandwidth provided is 15 Mbps.
      licenseFileId:
        type: string
        example: d6e21e0c-86dd-11e8-adc0-fa7ae01bbebc
      licenseToken:
        type: string
        example: V74191621
      metroCode:
        type: string
        example: SV
      notifications:
        type: array
        items:
          type: string
          enum:
            - test1@example.com
            - test2@example.com
      acl:
        type: array
        items:
          type: string
          enum:
            - 192.168.1.1/29
            - 10.10.25.1/24
      sshUsers:
        type: array
        items:
          $ref: "#/definitions/SshUserOperationRequest"
      virtualDeviceName:
        type: string
        example: Router1-csr1000v
        description: Virtual Device Name
      siteId:
        type: string
        example: "12345"
      systemIpAddress:
        type: string
        example: 192.168.2.5
      licenseKey:
        type: string
        example: "6735-vwe64568-6a91-4112-8734-bea12d91f7y7"
      licenseSecret:
        type: string
        example: "h5j0i45e83324pblbfca764532c4a640e7801f0"
      hostNamePrefix:
        type: string
        example: mySR
        description: Host name prefix for identification. Only a-z, A-Z, 0-9 and hyphen(-) are allowed. It should start with a letter and end with a letter or a digit. Also, it should be minimum 2 and maximum 10 characters long.
  SshUserOperationRequest:
    type: object
    required:
      - action
    properties:
      sshUserUuid:
        type: string
        example: 999a3aa2-c49a-dddd-98a6-007424e73777
        description: Required for DELETE operation.
      action:
        type: string
        example: CREATE
        description: SSH operation to be performed
        enum:
          - CREATE
          - DELETE
          - REUSE
      sshUsername:
        type: string
        example: cust0001_DC
        description: SSH User name
      sshPassword:
        type: string
        example: projPass
        description: SSH Password
  FieldErrorResponse:
    type: array
    items:
      $ref: "#/definitions/ErrorMessageResponse"
  Charges:
    type: object
    properties:
      description:
        type: string
        description: Description of the charge, whether it is for the virtual device, the device license, or the additional bandwidth
      monthlyRecurringCharges:
        type: string
        description: Monthly charges
  Metro:
    type: object
    properties:
      metroCode:
        description: Metro code
        type: string
        example: DC
      metroDescription:
        description: Metro description
        type: string
        example: Ashburn
      region:
        description: Region. It may have several metros.
        type: string
        example: AMER
  PageResponse:
    type: object
    properties:
      content:
        type: array
        items:
          type: object
      pageNumber:
        type: integer
        format: int32
      pageSize:
        type: integer
        format: int32
      totalCount:
        type: integer
        format: int64
  VirtualDeviceDetailsResponse:
    type: object
    properties:
      accountName:
        type: string
        example: ABC INC
      accountNumber:
        type: string
        example: "133911"
      createdBy:
        type: string
        example: cust0001
      createdDate:
        type: string
        example: "2018-01-30T10:30:31.387Z"
      deviceSerialNo:
        type: string
        example: "53791666484"
      deviceTypeCategory:
        type: string
        example: ROUTER
      deviceTypeCode:
        type: string
        example: CSR1000V
      deviceTypeName:
        type: string
        example: CSR 1000v
      expiry:
        type: string
        example: 2019-02-07 00:00:00
      region:
        type: string
        example: AMER
      deviceTypeVendor:
        type: string
        example: Cisco
      hostName:
        type: string
        example: VR-SV-CSR1000V-cust0001-1
      uuid:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
      lastUpdatedBy:
        type: string
        example: cust0002
      lastUpdatedDate:
        type: string
        example: "2018-01-30T10:30:31.387Z"
      licenseFileId:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
      licenseName:
        type: string
        example: Bring your own license
      licenseStatus:
        type: string
        example: REGISTERED
      licenseType:
        type: string
        example: BYOL
      metroCode:
        type: string
        example: SV
      metroName:
        type: string
        example: Silicon Valley
      name:
        type: string
        example: AWS-Azure-Router-csr1000v
      notifications:
        type: array
        items:
          type: string
          example: [test@equinix.com, test1@eqinix.com]
      packageCode:
        type: string
        example: IPBASE
      packageName:
        type: string
        example: IPBASE
      purchaseOrderNumber:
        type: string
        example: PO1223
      redundancyType:
        type: string
        example: PRIMARY
      redundantUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa67xx
      sshIpAddress:
        type: string
        example: 10.195.11.23
      sshIpFqdn:
        type: string
        example: test-device-168-201-97-149.eis.lab.equinix.com
      status:
        type: string
        example: PROVISIONED
      throughput:
        type: string
        example: 500
      throughputUnit:
        type: string
        example: Mbps
      acl:
        type: array
        items:
          type: string
        example: ["192.168.1.1/32", "192.168.94.0/24"]
      managementIp:
        type: string
        example: 10.195.237.228/26
      managementGatewayIp:
        type: string
        example: 10.195.237.254
      publicIp:
        type: string
        example: 149.97.198.95/31
      publicGatewayIp:
        type: string
        example: 149.97.198.94
      primaryDnsName:
        type: string
        example: 4.0.0.53
      secondaryDnsName:
        type: string
        example: 129.250.35.250
      termLength:
        type: integer
        format: int32
        example: 12
      additionalBandwidth:
        type: integer
        format: int32
        example: 200
      siteId:
        type: string
        example: "12345"
      systemIpAddress:
        type: string
        example: 192.168.2.5
      vendorConfig:
        $ref: "#/definitions/VendorConfig"
      licenseKey:
        type: string
        example: 1404-991d81bb-2567-43e5-a14c-1493ace58046
      licenseSecret:
        type: string
        example: d29dceeef2d2b494c9eb76937a361890786e609d
      localId:
        type: string
        example: branch1@example.com
      remoteId:
        type: string
        example: companyController1@example.com
      controller1:
        type: string
        example: 54.219.248.29
      controller2:
        type: string
        example: 54.177.220.115
      serialNumber:
        type: string
        example: 4545454
      interfaces:
        type: array
        items:
          $ref: "#/definitions/InterfaceBasicInfoResponse"
      version:
        type: string
        example: "6.0.4"
      interfaceCount:
        type: integer
        format: int32
        example: 2
      core:
        type: integer
        format: int32
        example: 2
      deviceManagementType:
        type: string
        example: EQUINIX-CONFIGURED
  InterfaceBasicInfoResponse:
    type: object
    properties:
      id:
        type: integer
        format: int32
        example: 1
      ipv4Mask:
        type: string
        example: 255.255.255.0
      ipv4Subnet:
        type: string
        example: 192.168.0.5
      name:
        type: string
        example: ethernet1
      status:
        type: string
        example: ASSIGNED
      operationalStatus:
        type: string
        example: DOWN
      macAddress:
        type: string
        example: fa16.3e1c.a8d8
      ipAddress:
        type: string
        example: 2.2.2.2
      type:
        type: string
        example: DATA
      assignedType:
        type: string
        example: Equinix Managed
      asn:
        type: integer
        format: int64
        example: 1029
  PageResponseDto-MetroResponse:
    type: object
    properties:
      content:
        type: array
        items:
          $ref: "#/definitions/MetroResponse"
      pageNumber:
        type: integer
        format: int32
        description: Page number
      pageSize:
        type: integer
        format: int32
        description: Number of results per page
  PageResponseDto-MetroAccountResponse:
    type: object
    properties:
      accountCreateUrl:
        type: string
        description: accountCreateUrl
      content:
        type: array
        items:
          $ref: "#/definitions/MetroAccountResponse"
      totalCount:
        type: integer
        format: int64
        description: Total count
      errorMessage:
        type: string
        description: error Message
      errorCode:
        type: string
        description: error Code
  MetroAccountResponse:
    type: object
    properties:
      accountName:
        type: string
        description: account Name
        example: nfv1
      accountNumber:
        type: integer
        description: account number
        example: 2252619
      accountUcmId:
        type: string
        description: account UcmId
        example: 92D27009-EA33-4b60-B4FB-D3C4ED589649
      accountStatus:
        type: string
        description: account status
        example: Active
      referenceId:
        type: string
        description: referenceId
        example: ""
  PageResponseDto:
    type: object
    properties:
      content:
        type: array
        items:
          type: object
      list:
        type: array
        items:
          type: object
      pageNumber:
        type: integer
        format: int32
      pageSize:
        type: integer
        format: int32
      totalCount:
        type: integer
        format: int64
  SshUsersBulkOperationsRequest:
    type: object
    required:
      - sshUsers
    properties:
      sshUsers:
        type: array
        items:
          type: object
  VirtualDevicePageResponse:
    type: object
    properties:
      pageNumber:
        type: integer
        format: int32
      pageSize:
        type: integer
        format: int32
      totalCount:
        type: integer
        format: int64
      content:
        type: array
        items:
          $ref: "#/definitions/VirtualDeviceDetailsResponse"
  PriceResponse:
    type: object
    properties:
      billingCommencementDate:
        type: string
      billingEnabled:
        type: boolean
      charges:
        type: array
        description: Monthly recurring charges
        items:
          $ref: "#/definitions/Charges"
      currency:
        type: string
  CompositePriceResponse:
    type: object
    properties:
      primary:
        $ref: "#/definitions/PriceResponse"
      secondary:
        $ref: "#/definitions/PriceResponse"
      termLength:
        type: string
        example: "24"
  LicenseUploadResponse:
    type: object
    properties:
      fileId:
        type: string
  LicenseUpdateRequest:
    type: object
    properties:
      token:
        type: string
        example: A1025025
  MetroResponse:
    type: object
    properties:
      metroCode:
        type: string
        description: Metro code
        example: SV
      metroDescription:
        type: string
        description: Metro description
        example: Silicon Valley
      region:
        type: string
        description: Region within which the metro is located
        example: AMER
  PostConnectionRequest:
    type: object
    properties:
      primaryName:
        type: string
        example: v3-api-test-pri
      virtualDeviceUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      profileUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      authorizationKey:
        type: string
        example: 444111000222
      speed:
        type: integer
        example: 50
      speedUnit:
        type: string
        example: MB
      notifications:
        type: array
        items:
          type: string
          example: sandboxuser@example-company.com
      purchaseOrderNumber:
        type: string
        example: "312456323"
      sellerRegion:
        type: string
        example: us-west-1
      sellerMetroCode:
        type: string
        example: SV
      secondaryName:
        type: string
        example: v3-api-test-sec1
      namedTag:
        type: string
        example: Private
      secondaryVirtualDeviceUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      secondaryProfileUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      secondaryAuthorizationKey:
        type: string
        example: 444111000222
      secondarySellerRegion:
        type: string
        example: us-west-1
      secondarySellerMetroCode:
        type: string
        example: SV
      secondarySpeed:
        type: integer
        example: 50
      secondarySpeedUnit:
        type: string
        example: MB
      secondaryNotifications:
        type: array
        items:
          type: string
          example: sandboxuser@example-company.com
      primaryZSideVlanCTag:
        type: integer
        example: 101
      secondaryZSideVlanCTag:
        type: integer
        example: 102
      primaryZSidePortUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      primaryZSideVlanSTag:
        type: integer
        example: 301
      secondaryZSidePortUUID:
        type: string
        example: xxxxx192-xx70-xxxx-xx04-xxxxxxxa37xx
      secondaryZSideVlanSTag:
        type: integer
        example: 302
  PostConnectionResponse:
    type: object
    properties:
      message:
        type: string
        example: Connection created successfully
      primaryConnectionId:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      secondaryConnectionId:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      status:
        type: string
        example: SUCCESS
  BgpConnectionInfo:
    type: object
    properties:
      bgpStatus:
        type: string
      isPrimary:
        type: boolean
      metro:
        type: string
      name:
        type: string
      providerStatus:
        type: string
      redundantConnection:
        $ref: "#/definitions/BgpConnectionInfo"
      redundantUUID:
        type: string
      sellerOrganizationName:
        type: string
      status:
        type: string
      uuid:
        type: string
  BgpConfigAddRequest:
    type: object
    properties:
      authenticationKey:
        description: Provide a key value that you can use later to authenticate.
        type: string
        example: pass123
      connectionUUID:
        type: string
        example: f79eead8-b837-41d3-9095-9b15c2c4996d
        description: UUID of the connection between the virtual device and the cloud service provider
      localAsn:
        type: integer
        format: int64
        example: 10012
        description: Local ASN (autonomous system network). This is the ASN of the virtual device.
      localIpAddress:
        type: string
        example: 100.210.1.221/30
        description: Local IP Address. This is the IP address of the virtual device in CIDR format.
      remoteAsn:
        type: integer
        format: int64
        example: 10013
        description: Remote ASN (autonomous system network). This is the ASN of the cloud service provider.
      remoteIpAddress:
        type: string
        example: 100.210.1.31
        description: Remote IP Address. This is the IP address of the cloud service provider.
  BgpInfo:
    type: object
    properties:
      authenticationKey:
        type: string
      connectionUUID:
        type: string
      createdBy:
        type: string
      createdByEmail:
        type: string
      createdByFullName:
        type: string
      createdDate:
        type: string
      deletedBy:
        type: string
      deletedByEmail:
        type: string
      deletedByFullName:
        type: string
      deletedDate:
        type: string
      lastUpdatedBy:
        type: string
      lastUpdatedByEmail:
        type: string
      lastUpdatedByFullName:
        type: string
      lastUpdatedDate:
        type: string
      localAsn:
        type: integer
        format: int64
      localIpAddress:
        type: string
      provisioningStatus:
        type: string
      remoteAsn:
        type: integer
        format: int64
      remoteIpAddress:
        type: string
      state:
        type: string
      uuid:
        type: string
      virtualDeviceUUID:
        type: string
  VpnResponse:
    type: object
    required:
      - password
      - peerIp
      - peerSharedKey
      - remoteAsn
      - remoteIpAddress
      - siteName
      - tunnelIp
      - virtualDeviceUUID
    properties:
      siteName:
        type: string
        example: Chicago
      uuid:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
      virtualDeviceUUID:
        type: string
        example: f79eead8-b837-41d3-9095-9b15c2c4996d
      configName:
        type: string
        example: Traffic from AWS cloud
      status:
        type: string
        example: PROVISIONED
      peerIp:
        type: string
        example: 110.11.12.222
      peerSharedKey:
        type: string
        example: 5bb2424e888bd
      remoteAsn:
        type: integer
        format: int64
        example: 65413
        description: Remote Customer ASN - Customer side
      remoteIpAddress:
        type: string
        example: 100.210.1.31
        description: Remote Customer IP Address - Customer side
      password:
        type: string
        example: pass123
        description: BGP Password
      localAsn:
        type: integer
        format: int64
        example: 65414
        description: Local ASN - Equinix side
      tunnelIp:
        type: string
        example: 192.168.7.2/30
        description: Local Tunnel IP Address in CIDR format
      bgpState:
        type: string
        example: ESTABLISHED
      inboundBytes:
        type: string
        example: "8780"
      inboundPackets:
        type: string
        example: "8780"
      outboundBytes:
        type: string
        example: "8765"
      outboundPackets:
        type: string
        example: "8765"
      tunnelStatus:
        type: string
        example: UP
      custOrgId:
        type: integer
        format: int64
        example: 65555
      createdDate:
        type: string
        example: "2018-05-18 06:34:26"
      createdByFirstName:
        type: string
        example: John
      createdByLastName:
        type: string
        example: Smith
      createdByEmail:
        type: string
        example: alpha@beta.com
      createdByUserKey:
        type: integer
        format: int64
        example: 123
      createdByAccountUcmId:
        type: integer
        format: int64
        example: 456
      createdByUserName:
        type: string
        example: jsmith
      createdByCustOrgId:
        type: integer
        format: int64
        example: 7863
      createdByCustOrgName:
        type: string
        example: My Awesome Org
      createdByUserStatus:
        type: string
        example: ACTIVATED
      createdByCompanyName:
        type: string
        example: My Awesome Company
      lastUpdatedDate:
        type: string
        example: "2018-07-21 05:20:20"
      updatedByFirstName:
        type: string
        example: John
      updatedByLastName:
        type: string
        example: Smith
      updatedByEmail:
        type: string
        example: alpha@beta.com
      updatedByUserKey:
        type: integer
        format: int64
        example: 123
      updatedByAccountUcmId:
        type: integer
        format: int64
        example: 456
      updatedByUserName:
        type: string
        example: jsmith
      updatedByCustOrgId:
        type: integer
        format: int64
        example: 7863
      updatedByCustOrgName:
        type: string
        example: My Awesome Org
      updatedByUserStatus:
        type: string
        example: ACTIVATED
      updatedByCompanyName:
        type: string
        example: My Awesome Company
  BgpUpdateRequest:
    type: object
    properties:
      authenticationKey:
        type: string
        example: pass123
        description: Authentication Key
      localAsn:
        type: integer
        format: int64
        example: 10012
        description: Local ASN
      localIpAddress:
        type: string
        example: 100.210.1.221/30
        description: Local IP Address with subnet
      remoteAsn:
        type: integer
        format: int64
        example: 10013
        description: Remote ASN
      remoteIpAddress:
        type: string
        example: 100.210.1.31
        description: Remote IP Address
  ConnectionList:
    type: object
    properties:
      interfaceUuid:
        type: string
      isPrimary:
        type: boolean
      metro:
        type: string
      name:
        type: string
      redundantConnection:
        $ref: "#/definitions/ConnectionList"
      redundantUuid:
        type: string
      sellerOrganizationName:
        type: string
      state:
        type: string
      status:
        type: string
      uuid:
        type: string
  BgpAsyncResponse:
    type: object
    properties:
      uuid:
        type: string
  Vpn:
    type: object
    required:
      - password
      - peerIp
      - peerSharedKey
      - remoteAsn
      - remoteIpAddress
      - siteName
      - tunnelIp
      - virtualDeviceUUID
    properties:
      siteName:
        type: string
        example: Chicago
      virtualDeviceUUID:
        type: string
        example: f79eead8-b837-41d3-9095-9b15c2c4996d
        description: Primary Virtual Device UUID
      configName:
        type: string
        example: Traffic from AWS cloud
      peerIp:
        type: string
        example: 110.11.12.222
      peerSharedKey:
        type: string
        example: 5bb2424e888bd
      remoteAsn:
        type: integer
        format: int64
        example: 65413
        description: Remote Customer ASN - Customer side
      remoteIpAddress:
        type: string
        example: 100.210.1.31
        description: Remote Customer IP Address - Customer side
      password:
        type: string
        example: pass123
        description: BGP Password
      localAsn:
        type: integer
        format: int64
        example: 65414
        description: Local ASN - Equinix side
      tunnelIp:
        type: string
        example: 192.168.7.2/30
        description: Local Tunnel IP Address in CIDR format
      secondary:
        description: Secondary VPN details. Required if VPN is for a HA enabled device.
        $ref: "#/definitions/VpnRequest"
  VpnRequest:
    type: object
    required:
      - password
      - peerIp
      - peerSharedKey
      - remoteAsn
      - remoteIpAddress
      - tunnelIp
    properties:
      configName:
        type: string
        example: Traffic from AWS cloud
      peerIp:
        type: string
        example: 110.11.12.222
      peerSharedKey:
        type: string
        example: 5bb2424e888bd
      remoteAsn:
        type: integer
        format: int64
        example: 65413
        description: Remote Customer ASN - Customer side
      remoteIpAddress:
        type: string
        example: 100.210.1.31
        description: Remote Customer IP Address - Customer side
      password:
        type: string
        example: pass123
        description: BGP Password
      localAsn:
        type: integer
        format: int64
        example: 65414
        description: Local ASN - Equinix side
      tunnelIp:
        type: string
        example: 192.168.7.2/30
        description: Local Tunnel IP Address in CIDR format
  SshUserExists:
    type: object
    properties:
      metroCode:
        type: string
        example: SV
      sshUsername:
        type: string
        example: cust0001_DC
  ErrorResponse:
    type: object
    properties:
      errorCode:
        type: string
        example: ErrorCode
      errorMessage:
        type: string
        example: Error message
      moreInfo:
        type: string
        example: More Info
      property:
        type: string
        example: Property
  ErrorResponseArray:
    type: array
    items:
      $ref: "#/definitions/ErrorResponse"
  GetBuyerConnectionResponse:
    type: object
    properties:
      pageSize:
        type: integer
        example: 10000
      content:
        type: array
        items:
          $ref: "#/definitions/GetBuyerConResContent"
      isFirstPage:
        type: boolean
        example: true
      isLastPage:
        type: boolean
        example: true
      pageNumber:
        type: integer
        example: 0
      totalCount:
        type: integer
        example: 9
  GetBuyerConResContent:
    type: object
    properties:
      asideEncapsulation:
        type: string
        example: dot1q
      authorizationKey:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      billingTier:
        type: string
        example: Up to 50 MB
      buyerOrganizationName:
        type: string
        example: Sandbox User
      createdBy:
        type: string
        example: Sandbox User
      createdByEmail:
        type: string
        example: sandboxuser@example-company.com
      createdByFullName:
        type: string
        example: Sandbox USER
      createdDate:
        type: string
        example: "2018-04-12T18:05:24.167Z"
      lastUpdatedBy:
        type: string
        example: Sandbox User
      lastUpdatedByEmail:
        type: string
        example: sandboxuser@example-company.com
      lastUpdatedByFullName:
        type: string
        example: Sandbox User
      lastUpdatedDate:
        type: string
        example: "2018-04-12T17:13:53.031Z"
      metroCode:
        type: string
        example: CH
      metroDescription:
        type: string
        example: Chicago
      name:
        type: string
        example: Sandbox 001S
      namedTag:
        type: string
      notifications:
        type: array
        items:
          type: string
          example: sandboxuser@example-company.com
      virtualDeviceUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      private:
        type: boolean
        example: false
      purchaseOrderNumber:
        type: string
        example: "111"
      redundancyGroup:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      redundancyType:
        type: string
        example: secondary
      redundantUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      remote:
        type: boolean
        example: true
      self:
        type: boolean
        example: false
      sellerMetroCode:
        type: string
        example: Sv
      sellerMetroDescription:
        type: string
        example: Silicon Valley
      sellerOrganizationName:
        type: string
        example: sit-001
      sellerServiceName:
        type: string
        example: Azure Express Route
      sellerServiceUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      speed:
        type: integer
        example: 50
      speedUnit:
        type: string
        example: MB
      providerStatus:
        type: string
        example: PROVISIONED
      status:
        type: string
        example: PROVISIONED
      uuid:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      vlanSTag:
        type: integer
        example: 11
      zSidePortName:
        type: string
        example: SJC-TEST-TEST-06TES-CIS-5-TES-A
      zSidePortUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      zSideVlanCTag:
        type: integer
        example: 201
      zSideVlanSTag:
        type: integer
        example: 11
  GetValidateAuthKeyRes:
    type: object
    properties:
      message:
        type: string
        example: Authorization key provided is valid
      status:
        type: string
        example: VALID
      primary:
        $ref: "#/definitions/GetValidateAuthkeyresPrimary"
      secondary:
        $ref: "#/definitions/GetValidateAuthkeyresSecondary"
  GetValidateAuthkeyresPrimary:
    type: object
    properties:
      bandwidth:
        type: string
        example: 50MB
  GetValidateAuthkeyresSecondary:
    type: object
    properties:
      bandwidth:
        type: string
        example: 50MB
  GetServProfServicesResp:
    type: object
    properties:
      isLastPage:
        type: boolean
        example: true
      totalCount:
        type: integer
        example: 55
      isFirstPage:
        type: boolean
        example: true
      pageSize:
        type: integer
        example: 1000
      pageNumber:
        type: integer
        example: 1
      content:
        type: array
        items:
          $ref: "#/definitions/GetServProfServicesRespContent"
  GetServProfServicesRespContent:
    type: object
    properties:
      uuid:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      name:
        type: string
        example: test
      authKeyLabel:
        type: string
        example: Authorization Key
      connectionNameLabel:
        type: string
        example: Connection Name
      requiredRedundancy:
        type: boolean
        example: false
      allowCustomSpeed:
        type: boolean
        example: false
      speedBands:
        type: array
        items:
          $ref: "#/definitions/SpeedBand"
      metros:
        $ref: "#/definitions/GetServProfServicesRespContentMetros"
      createdDate:
        type: string
        example: "2018-03-22T04:34:48.231Z"
      createdBy:
        type: string
        example: Sandbox User
      lastUpdatedDate:
        type: string
        example: "2018-04-03T00:30:57.055Z"
      lastUpdatedBy:
        type: string
        example: Sandbox User
      vlanSameAsPrimary:
        type: boolean
        example: false
      tagType:
        type: string
        example: CTAGED
      ctagLabel:
        type: string
        example: Seller-Side C-Tag
      apiAvailable:
        type: boolean
        example: false
      selfProfile:
        type: boolean
        example: false
      profileEncapsulation:
        type: string
        example: Dot1q
      authorizationKey:
        type: string
        example: "535235"
      organizationName:
        type: string
        example: Equinix-ADMIN
      private:
        type: boolean
        example: false
      features:
        $ref: "#/definitions/GetServProfServicesRespContentfeatures"
  SpeedBand:
    type: object
    properties:
      speed:
        type: number
        format: double
        example: 50
      unit:
        type: string
        example: MB
  GetServProfServicesRespContentMetros:
    type: object
    properties:
      code:
        type: string
        example: SV
      name:
        type: string
        example: Silicon Valley
      ibxs:
        type: array
        items:
          type: string
          example: SV1
      inTrail:
        type: boolean
        example: false
      displayName:
        type: string
        example: Silicon Valley
  GetServProfServicesRespContentfeatures:
    type: object
    properties:
      cloudReach:
        type: boolean
        example: true
      testProfile:
        type: boolean
        example: false
  PatchRequest:
    type: object
    properties:
      accessKey:
        type: string
        example: AKIAIXKQARIFBC3QJKYQ
      secretKey:
        type: string
        example: ARIFW1lWbqNSOqSkCAOXAhep22UGyLJvkDBAIG
  DeleteConnectionResponse:
    type: object
    properties:
      message:
        type: string
        example: Message
      primaryConnectionId:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
  GETConnectionByUUidResponse:
    type: object
    properties:
      buyerOrganizationName:
        type: string
        example: Forsythe Solutions Group, Inc.
      uuid:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      name:
        type: string
        example: Test-123
      vlanSTag:
        type: integer
        format: int32
        example: 1015
      portUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      portName:
        type: string
        example: TEST-CH2-CX-SEC-01
      asideEncapsulation:
        type: string
        example: dot1q
      metroCode:
        type: string
        example: CH
      metroDescription:
        type: string
        example: Chicago
      providerStatus:
        type: string
        example: PROVISIONED
      status:
        type: string
        example: PROVISIONED
      billingTier:
        type: string
        example: Up to 500MB
      authorizationKey:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      speed:
        type: integer
        format: int32
        example: 500
      speedUnit:
        type: string
        example: MB
      redundancyType:
        type: string
        example: secondary
      redundancyGroup:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      sellerMetroCode:
        type: string
        example: CH
      sellerMetroDescription:
        type: string
        example: Chicago
      sellerServiceName:
        type: string
        example: XYZ Cloud Service
      sellerServiceUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      sellerOrganizationName:
        type: string
        example: EQUINIX-CLOUD-EXCHANGE
      notifications:
        type: array
        items:
          type: string
          example: sandboxuser@example-company.com, sandboxuser@example-company.com
      purchaseOrderNumber:
        type: string
        example: O-1234567890
      namedTag:
        type: string
        example: Private
      createdDate:
        type: string
        example: "2017-09-26T22:46:24.312Z"
      createdBy:
        type: string
        example: sandboxuser@example-company.com
      createdByFullName:
        type: string
        example: Sandbox User
      createdByEmail:
        type: string
        example: sandboxuser@example-company.com
      lastUpdatedBy:
        type: string
        example: sandboxuser@example-company.com
      lastUpdatedDate:
        type: string
        example: "2017-09-26T23:01:46Z"
      lastUpdatedByFullName:
        type: string
        example: Sandbox User
      lastUpdatedByEmail:
        type: string
        example: sandboxuser@example-company.com
      zSidePortName:
        type: string
        example: TEST-CHG-06GMR-Tes-2-TES-C
      zSidePortUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
      zSideVlanCTag:
        type: integer
        format: int32
        example: 515
      zSideVlanSTag:
        type: integer
        format: int32
        example: 2
      remote:
        type: boolean
        example: false
      private:
        type: boolean
        example: false,
      self:
        type: boolean
        example: false,
      redundantUUID:
        type: string
        example: xxxxx191-xx70-xxxx-xx04-xxxxxxxa37xx
  OrderTermsResponse:
    type: object
    properties:
      terms:
        type: string
  OrderSummaryResponse:
    type: object
    properties:
      accountNumber:
        type: integer
        format: int32
      agreementId:
        type: string
      charges:
        type: array
        items:
          $ref: "#/definitions/DeviceElement"
      currency:
        type: string
      errorCode:
        type: string
      errorMessage:
        type: string
      esignAgreementId:
        type: string
      ibxCountry:
        type: string
      ibxRegion:
        type: string
      initialTerm:
        type: integer
        format: int32
      metro:
        type: string
      monthlyRecurringCharges:
        type: number
        format: double
      nonRecurringCharges:
        type: number
        format: double
      nonRenewalNotice:
        type: string
      orderTerms:
        type: string
      piPercentage:
        type: string
      productDescription:
        type: string
      quantity:
        type: integer
        format: int32
      quoteContentType:
        type: string
      quoteFileName:
        type: string
      referenceId:
        type: string
      renewalPeriod:
        type: integer
        format: int32
      requestSignType:
        type: string
      signStatus:
        type: string
      signType:
        type: string
      speed:
        type: string
      status:
        type: string
      totalCharges:
        type: number
        format: double
  DeviceElement:
    type: object
    properties:
      description:
        type: string
      monthlyRecurringCharges:
        type: number
        format: double
      nonRecurringCharges:
        type: number
        format: double
      productCode:
        type: string
  DeviceChainingGroupRequest:
    type: object
    required:
      - groupName
    properties:
      groupName:
        type: string
        example: chainGroup
        description: Group name.
      subnet:
        type: string
        example: 192.164.0.0/29
        description: Subnet of the linking group.
      metroDevices:
        type: array
        description: An array of devices in various metros.
        items:
          $ref: "#/definitions/ChainingGroupMetroDeviceInfo"
      accountNumber:
        type: string
        description: Account number. Either an account number or an accountreferenceId is required to create a device linking group.
      accountReferenceId:
        type: string
        description: Account reference Id. This is a temporary ID that can be used to create a device linking group when your account is still pending, not active. Either an account number or an accountreferenceId is required to create a device linking group.
  ChainingGroupMetroDeviceInfo:
    type: object
    required:
      - metroCode
    properties:
      metroCode:
        type: string
        example: SV
        description: Metro code.
      throughput:
        type: string
        example: "1000"
        description: Metro Throughput.
      throughputUnit:
        type: string
        example: Mbps
        description: Throughput unit.
      devices:
        type: array
        description: An array of devices.
        items:
          $ref: "#/definitions/ChainingDeviceInfo"
  ChainingDeviceInfo:
    type: object
    required:
      - deviceUUID
    description: Unique Id of the device.
    properties:
      asn:
        type: integer
        format: int64
        example: 25658
        description: ASN number. The request will fail if you provide a new ASN for a device that already has an ASN.
      deviceUUID:
        type: string
        example: 70754e55-a064-40c3-a911-6dc1f14b96fd
        description: device
  DeviceChainingGroupResponse:
    type: object
    properties:
      uuid:
        type: string
        example: a5d9182d-c529-451d-b137-3742d5a742ce
  DeviceChainingGroupDto:
    type: object
    properties:
      accountName:
        type: string
        description: Account name.
        example: Samsung
      createdBy:
        type: string
        description: Created by username.
        example: nfv-sit1
      createdDate:
        type: string
        description: Created date.
        example: "2019-09-15T10:30:31.387Z"
      groupName:
        type: string
        description: Group name.
        example: vik-chain
      id:
        type: integer
        format: int64
        example: 1130
      lastUpdatedBy:
        type: string
        example: reg2-acc1
      lastUpdatedDate:
        type: string
        example: "2019-09-16T10:30:31.387Z"
      metroDevices:
        type: array
        description: An array of metros and the devices in the metros belonging to the group.
        items:
          $ref: "#/definitions/MetroDeviceInfo"
      source:
        type: string
        example: API
      status:
        type: string
        description: Status of the device.
        example: PROVISIONING
      subnet:
        type: string
        description: Subnet of the device linking group.
        example: 10.0.0.0/27
      uuid:
        type: string
        description: Unique Id of the linked group.
        example: 6ea5a0e4-2bf7-45c2-9aa7-e846a8cd5567
  MetroDeviceInfo:
    type: object
    properties:
      devices:
        type: array
        description: An array of devices that are part of the linking group.
        items:
          $ref: "#/definitions/DeviceInfo"
      metro:
        type: string
        description: Name of the metro.
        example: Dallas
      metroCode:
        type: string
        description: Metro Code
        example: DA
      throughput:
        type: string
        description: Throughput of the metro.
        example: "500"
      throughputUnit:
        type: string
        description: Throughput unit.
        example: Mbps
  DeviceInfo:
    type: object
    properties:
      aside:
        $ref: "#/definitions/JsonNode"
      category:
        type: string
        description: Category of the device.
        example: ROUTER
      cloudProfileProvisioningStatus:
        type: string
        example: PROVISIONED
      connectionStatus:
        type: string
      connectionUuid:
        type: string
      deviceName:
        type: string
        description: Name of the device.
        example: CSR-Device01
      deviceTypeCode:
        type: string
        description: Device type code.
        example: CSR1000V
      deviceUUID:
        type: string
        description: Unique Id of the device.
        example: 9ea5a0e4-2bf7-45c2-9aa7-e846a8cd5560
      interfaceId:
        type: string
        example: "123"
      interfaceOverlayStatus:
        type: string
        example: PROVISIONED
      interfaceUUID:
        type: string
        description: Unique Id of the interface used to link the device.
        example: 6d5b942a-429e-494e-87e0-993845951cf
      ipAssigned:
        type: string
        description: Assigned IP address of the device.
        example: 10.0.0.2/27
      networkDetails:
        $ref: "#/definitions/JsonNode"
      status:
        type: string
        description: Status of the device.
        example: PROVISIONING
      throughput:
        type: string
        description: Throughput of the device.
        example: "500"
      throughputUnit:
        type: string
        description: Throughput unit of the device.
        example: Mbps
      vxlan:
        type: string
        example: "123"
  JsonNode:
    type: object
    properties:
      array:
        type: boolean
      bigDecimal:
        type: boolean
      bigInteger:
        type: boolean
      binary:
        type: boolean
      boolean:
        type: boolean
      containerNode:
        type: boolean
      double:
        type: boolean
      float:
        type: boolean
      floatingPointNumber:
        type: boolean
      int:
        type: boolean
      integralNumber:
        type: boolean
      long:
        type: boolean
      missingNode:
        type: boolean
      nodeType:
        type: string
        enum:
          - ARRAY
          - BINARY
          - BOOLEAN
          - MISSING
          - "NULL"
          - NUMBER
          - OBJECT
          - POJO
          - STRING
      "null":
        type: boolean
      number:
        type: boolean
      object:
        type: boolean
      pojo:
        type: boolean
      short:
        type: boolean
      textual:
        type: boolean
      valueNode:
        type: boolean
  ChainingMetroThroughputPatchRequest:
    type: object
    properties:
      metrosThroughput:
        type: array
        description: An array of metroCodes and their throughput values.
        items:
          $ref: "#/definitions/ChainingGroupMetroThroughputInfo"
  ChainingGroupMetroThroughputInfo:
    type: object
    required:
      - metroCode
    properties:
      metroCode:
        type: string
        example: SV
        description: Metro code.
      throughput:
        type: string
        example: "1000"
        description: Throughput.
      throughputUnit:
        type: string
        example: Mbps
        description: Throughput unit.
  ChainingGroupNameSubnetPatchRequest:
    type: object
    properties:
      groupName:
        type: string
        example: chainGroup
        description: Device linking group name.
      subnet:
        type: string
        description: Subnet of the linking group.
        example: 192.164.0.0/27
  VendorConfig:
    type: object
    properties:
      siteId:
        type: string
        example: 567
        description: Physical location within the Viptela overlay network, such as a branch office, or a campus (relevant only for Cisco SDWANs)
      systemIpAddress:
        type: string
        description: IP assigned to CSRSDWAN router and vSmart controller (relevant only for Cisco SDWANs)
        example: 192.164.0.0
  VirtualDeviceInternalPatchRequestDto:
    type: object
    properties:
      notifications:
        type: array
        items:
          type: string
          example: test1@example.com
      termLength:
        type: integer
        description: Term length in months. Please keep in mind that you cannot downgrade the term length.
        example: 4
      virtualDeviceName:
        type: string
        description: Virtual device name. This should be minimum 3 and maximum 50 characters long.
        example: RCiscoSTROY
  VirtualDeviceCreateResponseDto:
    type: object
    properties:
      secondaryUUID:
        type: string
      uuid:
        type: string
        example: 877a3aa2-c49a-4af1-98a6-007424e737ae
  FqdnAcl:
    type: object
    properties:
      cidrs:
        type: array
        items:
          type: string
          example: ["192.168.0.0/16", "10.10.1.24/32"]
      type:
        type: string
        example: SUBNET
parameters:
  authorizationHeader:
    name: Authorization
    in: header
    description: The OAuth Bearer token. Please add the prefix 'Bearer ' before the token.
    type: string
    required: true
    x-prefix: "Bearer "
