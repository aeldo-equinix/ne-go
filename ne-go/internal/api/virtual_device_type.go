// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualDeviceType virtual device type
//
// swagger:model VirtualDeviceType
type VirtualDeviceType struct {

	// Array of metros where the device is available
	AvailableMetros []*Metro `json:"availableMetros"`

	// Type of virtual device, whether router or firewall
	Category string `json:"category,omitempty"`

	// Device description
	Description string `json:"description,omitempty"`

	// Device type code
	DeviceTypeCode string `json:"deviceTypeCode,omitempty"`

	// Array of available license options, subscription or BYOL (Bring Your Own License)
	LicenseOptions []*LicenseOptions `json:"licenseOptions"`

	// Name of the device
	Name string `json:"name,omitempty"`

	// Array of available software packages
	SoftwarePackages []*SoftwarePackage `json:"softwarePackages"`

	// Array of available throughput options
	ThroughputOptions []*Throughput `json:"throughputOptions"`

	// Vendor of the device
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this virtual device type
func (m *VirtualDeviceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableMetros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwarePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughputOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualDeviceType) validateAvailableMetros(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableMetros) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableMetros); i++ {
		if swag.IsZero(m.AvailableMetros[i]) { // not required
			continue
		}

		if m.AvailableMetros[i] != nil {
			if err := m.AvailableMetros[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableMetros" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualDeviceType) validateLicenseOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseOptions); i++ {
		if swag.IsZero(m.LicenseOptions[i]) { // not required
			continue
		}

		if m.LicenseOptions[i] != nil {
			if err := m.LicenseOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenseOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualDeviceType) validateSoftwarePackages(formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwarePackages) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwarePackages); i++ {
		if swag.IsZero(m.SoftwarePackages[i]) { // not required
			continue
		}

		if m.SoftwarePackages[i] != nil {
			if err := m.SoftwarePackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("softwarePackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualDeviceType) validateThroughputOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.ThroughputOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ThroughputOptions); i++ {
		if swag.IsZero(m.ThroughputOptions[i]) { // not required
			continue
		}

		if m.ThroughputOptions[i] != nil {
			if err := m.ThroughputOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("throughputOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDeviceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDeviceType) UnmarshalBinary(b []byte) error {
	var res VirtualDeviceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
