// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceInfo device info
//
// swagger:model DeviceInfo
type DeviceInfo struct {

	// aside
	Aside *JSONNode `json:"aside,omitempty"`

	// Category of the device.
	Category string `json:"category,omitempty"`

	// cloud profile provisioning status
	CloudProfileProvisioningStatus string `json:"cloudProfileProvisioningStatus,omitempty"`

	// connection status
	ConnectionStatus string `json:"connectionStatus,omitempty"`

	// connection Uuid
	ConnectionUUID string `json:"connectionUuid,omitempty"`

	// Name of the device.
	DeviceName string `json:"deviceName,omitempty"`

	// Device type code.
	DeviceTypeCode string `json:"deviceTypeCode,omitempty"`

	// Unique Id of the device.
	DeviceUUID string `json:"deviceUUID,omitempty"`

	// interface Id
	InterfaceID string `json:"interfaceId,omitempty"`

	// interface overlay status
	InterfaceOverlayStatus string `json:"interfaceOverlayStatus,omitempty"`

	// Unique Id of the interface used to link the device.
	InterfaceUUID string `json:"interfaceUUID,omitempty"`

	// Assigned IP address of the device.
	IPAssigned string `json:"ipAssigned,omitempty"`

	// network details
	NetworkDetails *JSONNode `json:"networkDetails,omitempty"`

	// Status of the device.
	Status string `json:"status,omitempty"`

	// Throughput of the device.
	Throughput string `json:"throughput,omitempty"`

	// Throughput unit of the device.
	ThroughputUnit string `json:"throughputUnit,omitempty"`

	// vxlan
	Vxlan string `json:"vxlan,omitempty"`
}

// Validate validates this device info
func (m *DeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAside(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceInfo) validateAside(formats strfmt.Registry) error {

	if swag.IsZero(m.Aside) { // not required
		return nil
	}

	if m.Aside != nil {
		if err := m.Aside.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aside")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceInfo) validateNetworkDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkDetails) { // not required
		return nil
	}

	if m.NetworkDetails != nil {
		if err := m.NetworkDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInfo) UnmarshalBinary(b []byte) error {
	var res DeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
