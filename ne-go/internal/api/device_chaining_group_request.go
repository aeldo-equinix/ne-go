// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceChainingGroupRequest device chaining group request
//
// swagger:model DeviceChainingGroupRequest
type DeviceChainingGroupRequest struct {

	// Account number. Either an account number or an accountreferenceId is required to create a device linking group.
	AccountNumber string `json:"accountNumber,omitempty"`

	// Account reference Id. This is a temporary ID that can be used to create a device linking group when your account is still pending, not active. Either an account number or an accountreferenceId is required to create a device linking group.
	AccountReferenceID string `json:"accountReferenceId,omitempty"`

	// Group name.
	// Required: true
	GroupName *string `json:"groupName"`

	// An array of devices in various metros.
	MetroDevices []*ChainingGroupMetroDeviceInfo `json:"metroDevices"`

	// Subnet of the linking group.
	Subnet string `json:"subnet,omitempty"`
}

// Validate validates this device chaining group request
func (m *DeviceChainingGroupRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceChainingGroupRequest) validateGroupName(formats strfmt.Registry) error {

	if err := validate.Required("groupName", "body", m.GroupName); err != nil {
		return err
	}

	return nil
}

func (m *DeviceChainingGroupRequest) validateMetroDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.MetroDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroDevices); i++ {
		if swag.IsZero(m.MetroDevices[i]) { // not required
			continue
		}

		if m.MetroDevices[i] != nil {
			if err := m.MetroDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metroDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceChainingGroupRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceChainingGroupRequest) UnmarshalBinary(b []byte) error {
	var res DeviceChainingGroupRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
