// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceChainingGroupDto device chaining group dto
//
// swagger:model DeviceChainingGroupDto
type DeviceChainingGroupDto struct {

	// Account name.
	AccountName string `json:"accountName,omitempty"`

	// Created by username.
	CreatedBy string `json:"createdBy,omitempty"`

	// Created date.
	CreatedDate string `json:"createdDate,omitempty"`

	// Group name.
	GroupName string `json:"groupName,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// last updated by
	LastUpdatedBy string `json:"lastUpdatedBy,omitempty"`

	// last updated date
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`

	// An array of metros and the devices in the metros belonging to the group.
	MetroDevices []*MetroDeviceInfo `json:"metroDevices"`

	// source
	Source string `json:"source,omitempty"`

	// Status of the device.
	Status string `json:"status,omitempty"`

	// Subnet of the device linking group.
	Subnet string `json:"subnet,omitempty"`

	// Unique Id of the linked group.
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this device chaining group dto
func (m *DeviceChainingGroupDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetroDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceChainingGroupDto) validateMetroDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.MetroDevices) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroDevices); i++ {
		if swag.IsZero(m.MetroDevices[i]) { // not required
			continue
		}

		if m.MetroDevices[i] != nil {
			if err := m.MetroDevices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metroDevices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceChainingGroupDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceChainingGroupDto) UnmarshalBinary(b []byte) error {
	var res DeviceChainingGroupDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
