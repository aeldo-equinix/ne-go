// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MetroDeviceInfo metro device info
//
// swagger:model MetroDeviceInfo
type MetroDeviceInfo struct {

	// An array of devices that are part of the linking group.
	Devices []*DeviceInfo `json:"devices"`

	// Name of the metro.
	Metro string `json:"metro,omitempty"`

	// Metro Code
	MetroCode string `json:"metroCode,omitempty"`

	// Throughput of the metro.
	Throughput string `json:"throughput,omitempty"`

	// Throughput unit.
	ThroughputUnit string `json:"throughputUnit,omitempty"`
}

// Validate validates this metro device info
func (m *MetroDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetroDeviceInfo) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetroDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetroDeviceInfo) UnmarshalBinary(b []byte) error {
	var res MetroDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
