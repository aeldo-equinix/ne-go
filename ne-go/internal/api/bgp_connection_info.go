// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BgpConnectionInfo bgp connection info
//
// swagger:model BgpConnectionInfo
type BgpConnectionInfo struct {

	// bgp status
	BgpStatus string `json:"bgpStatus,omitempty"`

	// is primary
	IsPrimary bool `json:"isPrimary,omitempty"`

	// metro
	Metro string `json:"metro,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider status
	ProviderStatus string `json:"providerStatus,omitempty"`

	// redundant connection
	RedundantConnection *BgpConnectionInfo `json:"redundantConnection,omitempty"`

	// redundant UUID
	RedundantUUID string `json:"redundantUUID,omitempty"`

	// seller organization name
	SellerOrganizationName string `json:"sellerOrganizationName,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this bgp connection info
func (m *BgpConnectionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRedundantConnection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BgpConnectionInfo) validateRedundantConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.RedundantConnection) { // not required
		return nil
	}

	if m.RedundantConnection != nil {
		if err := m.RedundantConnection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redundantConnection")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BgpConnectionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BgpConnectionInfo) UnmarshalBinary(b []byte) error {
	var res BgpConnectionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
