// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vpn vpn
//
// swagger:model Vpn
type Vpn struct {

	// config name
	ConfigName string `json:"configName,omitempty"`

	// Local ASN - Equinix side
	LocalAsn int64 `json:"localAsn,omitempty"`

	// BGP Password
	// Required: true
	Password *string `json:"password"`

	// peer Ip
	// Required: true
	PeerIP *string `json:"peerIp"`

	// peer shared key
	// Required: true
	PeerSharedKey *string `json:"peerSharedKey"`

	// Remote Customer ASN - Customer side
	// Required: true
	RemoteAsn *int64 `json:"remoteAsn"`

	// Remote Customer IP Address - Customer side
	// Required: true
	RemoteIPAddress *string `json:"remoteIpAddress"`

	// Secondary VPN details. Required if VPN is for a HA enabled device.
	Secondary *VpnRequest `json:"secondary,omitempty"`

	// site name
	// Required: true
	SiteName *string `json:"siteName"`

	// Local Tunnel IP Address in CIDR format
	// Required: true
	TunnelIP *string `json:"tunnelIp"`

	// Primary Virtual Device UUID
	// Required: true
	VirtualDeviceUUID *string `json:"virtualDeviceUUID"`
}

// Validate validates this vpn
func (m *Vpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerSharedKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAsn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDeviceUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vpn) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validatePeerIP(formats strfmt.Registry) error {

	if err := validate.Required("peerIp", "body", m.PeerIP); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validatePeerSharedKey(formats strfmt.Registry) error {

	if err := validate.Required("peerSharedKey", "body", m.PeerSharedKey); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validateRemoteAsn(formats strfmt.Registry) error {

	if err := validate.Required("remoteAsn", "body", m.RemoteAsn); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validateRemoteIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("remoteIpAddress", "body", m.RemoteIPAddress); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validateSecondary(formats strfmt.Registry) error {

	if swag.IsZero(m.Secondary) { // not required
		return nil
	}

	if m.Secondary != nil {
		if err := m.Secondary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondary")
			}
			return err
		}
	}

	return nil
}

func (m *Vpn) validateSiteName(formats strfmt.Registry) error {

	if err := validate.Required("siteName", "body", m.SiteName); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validateTunnelIP(formats strfmt.Registry) error {

	if err := validate.Required("tunnelIp", "body", m.TunnelIP); err != nil {
		return err
	}

	return nil
}

func (m *Vpn) validateVirtualDeviceUUID(formats strfmt.Registry) error {

	if err := validate.Required("virtualDeviceUUID", "body", m.VirtualDeviceUUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vpn) UnmarshalBinary(b []byte) error {
	var res Vpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
