// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VpnResponse vpn response
//
// swagger:model VpnResponse
type VpnResponse struct {

	// bgp state
	BgpState string `json:"bgpState,omitempty"`

	// config name
	ConfigName string `json:"configName,omitempty"`

	// created by account ucm Id
	CreatedByAccountUcmID int64 `json:"createdByAccountUcmId,omitempty"`

	// created by company name
	CreatedByCompanyName string `json:"createdByCompanyName,omitempty"`

	// created by cust org Id
	CreatedByCustOrgID int64 `json:"createdByCustOrgId,omitempty"`

	// created by cust org name
	CreatedByCustOrgName string `json:"createdByCustOrgName,omitempty"`

	// created by email
	CreatedByEmail string `json:"createdByEmail,omitempty"`

	// created by first name
	CreatedByFirstName string `json:"createdByFirstName,omitempty"`

	// created by last name
	CreatedByLastName string `json:"createdByLastName,omitempty"`

	// created by user key
	CreatedByUserKey int64 `json:"createdByUserKey,omitempty"`

	// created by user name
	CreatedByUserName string `json:"createdByUserName,omitempty"`

	// created by user status
	CreatedByUserStatus string `json:"createdByUserStatus,omitempty"`

	// created date
	CreatedDate string `json:"createdDate,omitempty"`

	// cust org Id
	CustOrgID int64 `json:"custOrgId,omitempty"`

	// inbound bytes
	InboundBytes string `json:"inboundBytes,omitempty"`

	// inbound packets
	InboundPackets string `json:"inboundPackets,omitempty"`

	// last updated date
	LastUpdatedDate string `json:"lastUpdatedDate,omitempty"`

	// Local ASN - Equinix side
	LocalAsn int64 `json:"localAsn,omitempty"`

	// outbound bytes
	OutboundBytes string `json:"outboundBytes,omitempty"`

	// outbound packets
	OutboundPackets string `json:"outboundPackets,omitempty"`

	// BGP Password
	// Required: true
	Password *string `json:"password"`

	// peer Ip
	// Required: true
	PeerIP *string `json:"peerIp"`

	// peer shared key
	// Required: true
	PeerSharedKey *string `json:"peerSharedKey"`

	// Remote Customer ASN - Customer side
	// Required: true
	RemoteAsn *int64 `json:"remoteAsn"`

	// Remote Customer IP Address - Customer side
	// Required: true
	RemoteIPAddress *string `json:"remoteIpAddress"`

	// site name
	// Required: true
	SiteName *string `json:"siteName"`

	// status
	Status string `json:"status,omitempty"`

	// Local Tunnel IP Address in CIDR format
	// Required: true
	TunnelIP *string `json:"tunnelIp"`

	// tunnel status
	TunnelStatus string `json:"tunnelStatus,omitempty"`

	// updated by account ucm Id
	UpdatedByAccountUcmID int64 `json:"updatedByAccountUcmId,omitempty"`

	// updated by company name
	UpdatedByCompanyName string `json:"updatedByCompanyName,omitempty"`

	// updated by cust org Id
	UpdatedByCustOrgID int64 `json:"updatedByCustOrgId,omitempty"`

	// updated by cust org name
	UpdatedByCustOrgName string `json:"updatedByCustOrgName,omitempty"`

	// updated by email
	UpdatedByEmail string `json:"updatedByEmail,omitempty"`

	// updated by first name
	UpdatedByFirstName string `json:"updatedByFirstName,omitempty"`

	// updated by last name
	UpdatedByLastName string `json:"updatedByLastName,omitempty"`

	// updated by user key
	UpdatedByUserKey int64 `json:"updatedByUserKey,omitempty"`

	// updated by user name
	UpdatedByUserName string `json:"updatedByUserName,omitempty"`

	// updated by user status
	UpdatedByUserStatus string `json:"updatedByUserStatus,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// virtual device UUID
	// Required: true
	VirtualDeviceUUID *string `json:"virtualDeviceUUID"`
}

// Validate validates this vpn response
func (m *VpnResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerSharedKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAsn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnelIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDeviceUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VpnResponse) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validatePeerIP(formats strfmt.Registry) error {

	if err := validate.Required("peerIp", "body", m.PeerIP); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validatePeerSharedKey(formats strfmt.Registry) error {

	if err := validate.Required("peerSharedKey", "body", m.PeerSharedKey); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validateRemoteAsn(formats strfmt.Registry) error {

	if err := validate.Required("remoteAsn", "body", m.RemoteAsn); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validateRemoteIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("remoteIpAddress", "body", m.RemoteIPAddress); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validateSiteName(formats strfmt.Registry) error {

	if err := validate.Required("siteName", "body", m.SiteName); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validateTunnelIP(formats strfmt.Registry) error {

	if err := validate.Required("tunnelIp", "body", m.TunnelIP); err != nil {
		return err
	}

	return nil
}

func (m *VpnResponse) validateVirtualDeviceUUID(formats strfmt.Registry) error {

	if err := validate.Required("virtualDeviceUUID", "body", m.VirtualDeviceUUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VpnResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VpnResponse) UnmarshalBinary(b []byte) error {
	var res VpnResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
