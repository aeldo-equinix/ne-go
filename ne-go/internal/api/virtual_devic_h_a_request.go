// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualDevicHARequest virtual devic h a request
//
// swagger:model VirtualDevicHARequest
type VirtualDevicHARequest struct {

	// account number
	AccountNumber string `json:"accountNumber,omitempty"`

	// account reference Id
	AccountReferenceID string `json:"accountReferenceId,omitempty"`

	// acl
	ACL []string `json:"acl"`

	// Secondary additional bandwidth to be configured (in Mbps for HA). Default bandwidth provided is 15 Mbps.
	AdditionalBandwidth int32 `json:"additionalBandwidth,omitempty"`

	// license file Id
	LicenseFileID string `json:"licenseFileId,omitempty"`

	// license key
	LicenseKey string `json:"licenseKey,omitempty"`

	// license secret
	LicenseSecret string `json:"licenseSecret,omitempty"`

	// license token
	LicenseToken string `json:"licenseToken,omitempty"`

	// metro code
	// Required: true
	MetroCode *string `json:"metroCode"`

	// notifications
	// Required: true
	Notifications []string `json:"notifications"`

	// site Id
	SiteID string `json:"siteId,omitempty"`

	// ssh users
	SSHUsers []*SSHUserOperationRequest `json:"sshUsers"`

	// system Ip address
	SystemIPAddress string `json:"systemIpAddress,omitempty"`

	// Virtual Device Name
	// Required: true
	VirtualDeviceName *string `json:"virtualDeviceName"`
}

// Validate validates this virtual devic h a request
func (m *VirtualDevicHARequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualDevicHARequestACLItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["192.168.1.1/29","10.10.25.1/24"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualDevicHARequestACLItemsEnum = append(virtualDevicHARequestACLItemsEnum, v)
	}
}

func (m *VirtualDevicHARequest) validateACLItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualDevicHARequestACLItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualDevicHARequest) validateACL(formats strfmt.Registry) error {

	if swag.IsZero(m.ACL) { // not required
		return nil
	}

	for i := 0; i < len(m.ACL); i++ {

		// value enum
		if err := m.validateACLItemsEnum("acl"+"."+strconv.Itoa(i), "body", m.ACL[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *VirtualDevicHARequest) validateMetroCode(formats strfmt.Registry) error {

	if err := validate.Required("metroCode", "body", m.MetroCode); err != nil {
		return err
	}

	return nil
}

var virtualDevicHARequestNotificationsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["test1@example.com","test2@example.com"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualDevicHARequestNotificationsItemsEnum = append(virtualDevicHARequestNotificationsItemsEnum, v)
	}
}

func (m *VirtualDevicHARequest) validateNotificationsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualDevicHARequestNotificationsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualDevicHARequest) validateNotifications(formats strfmt.Registry) error {

	if err := validate.Required("notifications", "body", m.Notifications); err != nil {
		return err
	}

	for i := 0; i < len(m.Notifications); i++ {

		// value enum
		if err := m.validateNotificationsItemsEnum("notifications"+"."+strconv.Itoa(i), "body", m.Notifications[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *VirtualDevicHARequest) validateSSHUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHUsers) { // not required
		return nil
	}

	for i := 0; i < len(m.SSHUsers); i++ {
		if swag.IsZero(m.SSHUsers[i]) { // not required
			continue
		}

		if m.SSHUsers[i] != nil {
			if err := m.SSHUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sshUsers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualDevicHARequest) validateVirtualDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("virtualDeviceName", "body", m.VirtualDeviceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualDevicHARequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualDevicHARequest) UnmarshalBinary(b []byte) error {
	var res VirtualDevicHARequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
